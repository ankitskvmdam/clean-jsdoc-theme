{
    "_items": [
        {
            "comment": "/**\r\n * @summary\r\n * This is a short summary of the `Alive` class. These texts are just acting\r\n * as filler texts for summary.\r\n * \r\n * @class\r\n */",
            "meta": {
                "range": [
                    864,
                    2253
                ],
                "filename": "Alive.js",
                "lineno": 23,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000002",
                    "name": "Alive",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "name": "Alive",
            "longname": "Alive",
            "kind": "class",
            "summary": "<p>This is a short summary of the <code>Alive</code> class. These texts are just acting\nas filler texts for summary.</p>",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Alive",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * A constant.\r\n     * @readonly\r\n     * @deprecated This is no longer used\r\n     */",
            "meta": {
                "range": [
                    1576,
                    1584
                ],
                "filename": "Alive.js",
                "lineno": 56,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000025",
                    "name": "FOO",
                    "type": "ClassProperty"
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>A constant.</p>",
            "readonly": true,
            "deprecated": "This is no longer used",
            "name": "FOO",
            "longname": "Alive#FOO",
            "kind": "member",
            "memberof": "Alive",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\">(readonly) </span>",
            "id": "FOO",
            "ancestors": [
                "<a href=\"Alive.html\">Alive</a>#"
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n         * This is a number array.\r\n         * @constant\r\n         * @type Object\r\n         * @default\r\n         */",
            "meta": {
                "range": [
                    1373,
                    1464
                ],
                "filename": "Alive.js",
                "lineno": 46,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000016",
                    "name": "this.NUMBER_ARRAY",
                    "type": "ObjectExpression",
                    "value": "{\"google\":\"Google\",\"games\":\"Games\"}",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>This is a number array.</p>",
            "kind": "member",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "defaultvalue": "<pre class='prettyprint'><code class='nohljsln compact'>{\"google\":\"Google\",\"games\":\"Games\"}</code></pre>",
            "defaultvaluetype": "object",
            "name": "NUMBER_ARRAY",
            "longname": "Alive#NUMBER_ARRAY",
            "memberof": "Alive",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\">(constant) </span>",
            "id": "NUMBER_ARRAY",
            "ancestors": [
                "<a href=\"Alive.html\">Alive</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Object</span>"
        },
        {
            "comment": "/**\r\n     * Text\r\n     * > Text\r\n     * \r\n     * \r\n     *```js\r\n     * code\r\n     *```\r\n     *\r\n     * \r\n     * > Note that commands are not matched in captions or in the middle of the text.\r\n     */",
            "meta": {
                "range": [
                    2208,
                    2250
                ],
                "filename": "Alive.js",
                "lineno": 80,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000034",
                    "name": "Alive#gameQuery",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>Text</p>\n<blockquote>\n<p>Text</p>\n</blockquote>\n<pre class=\"prettyprint source lang-js\"><code>code\n</code></pre>\n<blockquote>\n<p>Note that commands are not matched in captions or in the middle of the text.</p>\n</blockquote>",
            "name": "gameQuery",
            "longname": "Alive#gameQuery",
            "kind": "function",
            "memberof": "Alive",
            "scope": "instance",
            "params": [],
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "gameQuery",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Alive.html\">Alive</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @param {array<object|function|array|number|string|undefined|null|Symbol|boolean|Energy>} life This is an array of many things.\r\n     * @return {Energy} the energy wasted in this surviving instance\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu\r\n     * @method\r\n     * @deprecated\r\n     */",
            "meta": {
                "range": [
                    1953,
                    1997
                ],
                "filename": "Alive.js",
                "lineno": 65,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000027",
                    "name": "Alive#survive",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "life"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "params": [
                {
                    "type": {
                        "names": [
                            "array.<(object|function()|array|number|string|undefined|null|Symbol|boolean|Energy)>"
                        ]
                    },
                    "description": "<p>This is an array of many things.</p>",
                    "name": "life"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    },
                    "description": "<p>the energy wasted in this surviving instance</p>"
                }
            ],
            "tags": [
                {
                    "originalTitle": "link",
                    "title": "link",
                    "text": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu",
                    "value": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu"
                }
            ],
            "kind": "function",
            "deprecated": true,
            "name": "survive",
            "longname": "Alive#survive",
            "memberof": "Alive",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "survive",
            "signature": "<span class=\"signature\">(life)</span><span class=\"type-signature\"> &rarr; {<a href=\"Energy.html\">Energy</a>}</span>",
            "ancestors": [
                "<a href=\"Alive.html\">Alive</a>#"
            ]
        },
        {
            "comment": "/**\r\n         * @summary\r\n         * amount of energy\r\n         * @property {Energy}\r\n         * @defaultvalue null\r\n         * \r\n         * @example\r\n         * world = this.world\r\n         * function test() {\r\n         *  return world\r\n         * }\r\n         * @alias AliveEnergy\r\n         */",
            "meta": {
                "range": [
                    1214,
                    1232
                ],
                "filename": "Alive.js",
                "lineno": 39,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000010",
                    "name": "this.energy",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "summary": "<p>amount of energy</p>",
            "properties": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    }
                }
            ],
            "defaultvalue": "null",
            "examples": [
                {
                    "caption": "",
                    "code": "world = this.world\rfunction test() {\r return world\r}"
                }
            ],
            "alias": "AliveEnergy",
            "name": "AliveEnergy",
            "longname": "AliveEnergy",
            "kind": "member",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "AliveEnergy",
            "ancestors": [],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n * Donec imperdiet dignissim semper. Sed vehicula purus dui, eget porta lectus convallis sagittis. Suspendisse ac lectus dignissim, tincidunt nisi quis, gravida metus.\r\n * @class\r\n * @extends Alive\r\n */",
            "meta": {
                "range": [
                    209,
                    574
                ],
                "filename": "Apple.js",
                "lineno": 6,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002976",
                    "name": "Apple",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Apple.js"
            },
            "name": "Apple",
            "longname": "Apple",
            "kind": "class",
            "classdesc": "<p>Donec imperdiet dignissim semper. Sed vehicula purus dui, eget porta lectus convallis sagittis. Suspendisse ac lectus dignissim, tincidunt nisi quis, gravida metus.</p>",
            "augments": [
                "Alive"
            ],
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Apple",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * A constant.\r\n     * @readonly\r\n     * @deprecated This is no longer used\r\n     */",
            "meta": {
                "range": [
                    1576,
                    1584
                ],
                "filename": "Alive.js",
                "lineno": 56,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000025",
                    "name": "FOO",
                    "type": "ClassProperty"
                },
                "shortpath": "Alive.js"
            },
            "name": "FOO",
            "longname": "Apple#FOO",
            "kind": "member",
            "description": "<p>A constant.</p>",
            "readonly": true,
            "deprecated": "This is no longer used",
            "memberof": "Apple",
            "scope": "instance",
            "inherits": "Alive#FOO",
            "inherited": true,
            "overrides": "Alive#FOO",
            "attribs": "<span class=\"type-signature\">(readonly) </span>",
            "id": "FOO",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n         * This is a number array.\r\n         * @constant\r\n         * @type Object\r\n         * @default\r\n         */",
            "meta": {
                "range": [
                    1373,
                    1464
                ],
                "filename": "Alive.js",
                "lineno": 46,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000016",
                    "name": "this.NUMBER_ARRAY",
                    "type": "ObjectExpression",
                    "value": "{\"google\":\"Google\",\"games\":\"Games\"}",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "name": "NUMBER_ARRAY",
            "longname": "Apple#NUMBER_ARRAY",
            "kind": "member",
            "description": "<p>This is a number array.</p>",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "defaultvalue": "<pre class='prettyprint'><code class='nohljsln compact'>{\"google\":\"Google\",\"games\":\"Games\"}</code></pre>",
            "defaultvaluetype": "object",
            "memberof": "Apple",
            "scope": "instance",
            "inherits": "Alive#NUMBER_ARRAY",
            "inherited": true,
            "overrides": "Alive#NUMBER_ARRAY",
            "attribs": "<span class=\"type-signature\">(constant) </span>",
            "id": "NUMBER_ARRAY",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Object</span>"
        },
        {
            "comment": "/**\r\n         * Donec imperdiet dignissim\r\n         * @type {String}\r\n         */",
            "meta": {
                "range": [
                    376,
                    393
                ],
                "filename": "Apple.js",
                "lineno": 13,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002988",
                    "name": "this.color",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Apple.js"
            },
            "description": "<p>Donec imperdiet dignissim</p>",
            "type": {
                "names": [
                    "String"
                ]
            },
            "name": "color",
            "longname": "Apple#color",
            "kind": "member",
            "memberof": "Apple",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "color",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :String</span>"
        },
        {
            "comment": "/**\r\n * Sed vehicula purus dui\r\n * @event Apple#beEaten\r\n * @type {Energy}\r\n */",
            "meta": {
                "filename": "Apple.js",
                "lineno": 27,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Apple.js"
            },
            "description": "<p>Sed vehicula purus dui</p>",
            "kind": "event",
            "name": "beEaten",
            "type": {
                "names": [
                    "Energy"
                ]
            },
            "memberof": "Apple",
            "longname": "Apple#event:beEaten",
            "scope": "instance",
            "attribs": "",
            "id": "event:beEaten",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * Generate the Fibonacci sequence of numbers.\r\n     *\r\n     * @yields {number} The next number in the Fibonacci sequence.\r\n     */",
            "meta": {
                "range": [
                    557,
                    567
                ],
                "filename": "Apple.js",
                "lineno": 22,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002993",
                    "name": "Apple#fib",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Apple.js"
            },
            "description": "<p>Generate the Fibonacci sequence of numbers.</p>",
            "yields": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>The next number in the Fibonacci sequence.</p>"
                }
            ],
            "name": "fib",
            "longname": "Apple#fib",
            "kind": "function",
            "memberof": "Apple",
            "scope": "instance",
            "params": [],
            "generator": true,
            "attribs": "<span class=\"type-signature\">(generator) </span>",
            "id": "fib",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {number}</span>",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * Text\r\n     * > Text\r\n     * \r\n     * \r\n     *```js\r\n     * code\r\n     *```\r\n     *\r\n     * \r\n     * > Note that commands are not matched in captions or in the middle of the text.\r\n     */",
            "meta": {
                "range": [
                    2208,
                    2250
                ],
                "filename": "Alive.js",
                "lineno": 80,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000034",
                    "name": "Alive#gameQuery",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "name": "gameQuery",
            "longname": "Apple#gameQuery",
            "kind": "function",
            "description": "<p>Text</p>\n<blockquote>\n<p>Text</p>\n</blockquote>\n<pre class=\"prettyprint source lang-js\"><code>code\n</code></pre>\n<blockquote>\n<p>Note that commands are not matched in captions or in the middle of the text.</p>\n</blockquote>",
            "memberof": "Apple",
            "scope": "instance",
            "inherits": "Alive#gameQuery",
            "inherited": true,
            "overrides": "Alive#gameQuery",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "gameQuery",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @param {array<object|function|array|number|string|undefined|null|Symbol|boolean|Energy>} life This is an array of many things.\r\n     * @return {Energy} the energy wasted in this surviving instance\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu\r\n     * @method\r\n     * @deprecated\r\n     */",
            "meta": {
                "range": [
                    1953,
                    1997
                ],
                "filename": "Alive.js",
                "lineno": 65,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000027",
                    "name": "Alive#survive",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "life"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "name": "survive",
            "longname": "Apple#survive",
            "kind": "function",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    },
                    "description": "<p>the energy wasted in this surviving instance</p>"
                }
            ],
            "tags": [
                {
                    "originalTitle": "link",
                    "title": "link",
                    "text": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu",
                    "value": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu"
                }
            ],
            "deprecated": true,
            "memberof": "Apple",
            "scope": "instance",
            "params": [
                {
                    "type": {
                        "names": [
                            "array.<(object|function()|array|number|string|undefined|null|Symbol|boolean|Energy)>"
                        ]
                    },
                    "description": "<p>This is an array of many things.</p>",
                    "name": "life"
                }
            ],
            "inherits": "Alive#survive",
            "inherited": true,
            "overrides": "Alive#survive",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "survive",
            "signature": "<span class=\"signature\">(life)</span><span class=\"type-signature\"> &rarr; {<a href=\"Energy.html\">Energy</a>}</span>",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ]
        },
        {
            "comment": "/** @classdesc\r\n    * Represents an SQLite database\r\n    * @constructs Database\r\n    * @memberof module:SqlJs\r\n    * Open a new database either by creating a new one or opening an existing\r\n    * one stored in the byte array passed in first argument\r\n    * @param {number[]} data An array of bytes representing\r\n    * an SQLite database file\r\n    */",
            "meta": {
                "range": [
                    25294,
                    25890
                ],
                "filename": "api.js",
                "lineno": 739,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001928",
                    "name": "Database",
                    "type": "FunctionDeclaration",
                    "paramnames": [
                        "data"
                    ]
                },
                "vars": {
                    "this.filename": "Database#filename",
                    "this.db": "Database#db",
                    "this.statements": "Database#statements",
                    "this.functions": "Database#functions"
                },
                "shortpath": "api.js"
            },
            "classdesc": "<p>Represents an SQLite database</p>",
            "alias": "Database",
            "kind": "class",
            "memberof": "module:SqlJs\rOpen a new database either by creating a new one or opening an existing\rone stored in the byte array passed in first argument",
            "params": [
                {
                    "type": {
                        "names": [
                            "Array.<number>"
                        ]
                    },
                    "description": "<p>An array of bytes representing\nan SQLite database file</p>",
                    "name": "data"
                }
            ],
            "name": "Database",
            "longname": "Database",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Database",
            "signature": "<span class=\"signature\">(data)</span>",
            "ancestors": []
        },
        {
            "comment": "/** Close the database, and all associated prepared statements.\r\n    * The memory associated to the database and all associated statements\r\n    * will be freed.\r\n    *\r\n    * **Warning**: A statement belonging to a database that has been closed\r\n    * cannot be used anymore.\r\n    *\r\n    * Databases **must** be closed when you're finished with them, or the\r\n    * memory consumption will grow forever\r\n     */",
            "meta": {
                "range": [
                    35951,
                    36452
                ],
                "filename": "api.js",
                "lineno": 1001,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002509",
                    "name": "Database.prototype[\"close\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "close",
                    "paramnames": []
                },
                "vars": {
                    "": null,
                    "this.functions": "Database#functions",
                    "this.db": "Database#db"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Close the database, and all associated prepared statements.\nThe memory associated to the database and all associated statements\nwill be freed.</p>\n<p><strong>Warning</strong>: A statement belonging to a database that has been closed\ncannot be used anymore.</p>\n<p>Databases <strong>must</strong> be closed when you're finished with them, or the\nmemory consumption will grow forever</p>",
            "name": "[\"close\"]",
            "longname": "Database#[\"close\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22close%22%5D",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Register a custom `function` with SQLite\r\n    @example <caption>Register a simple function</caption>\r\n        db.create_function(\"addOne\", function (x) {return x+1;})\r\n        db.exec(\"SELECT addOne(1)\") // = 2\r\n    @param {string} name the name of the function as referenced in\r\n    SQL statements.\r\n    @param {function} func the actual function to be executed.\r\n    @return {Database} The database `object`. Useful for method chaining\r\n     */",
            "meta": {
                "range": [
                    37767,
                    41137
                ],
                "filename": "api.js",
                "lineno": 1045,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002640",
                    "name": "Database.prototype[\"create_function\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "create_function",
                    "paramnames": [
                        "name",
                        "func"
                    ]
                },
                "vars": {
                    "wrapped_func": "Database#\"create_function\"~wrapped_func",
                    "func_ptr": "Database#\"create_function\"~func_ptr",
                    "this.functions[undefined]": "Database#functions[undefined]"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Register a custom <code>function</code> with SQLite</p>",
            "examples": [
                {
                    "caption": "Register a simple function",
                    "code": "        db.create_function(\"addOne\", function (x) {return x+1;})\r\n        db.exec(\"SELECT addOne(1)\") // = 2\r\n    "
                }
            ],
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>the name of the function as referenced in\nSQL statements.</p>",
                    "name": "name"
                },
                {
                    "type": {
                        "names": [
                            "function"
                        ]
                    },
                    "description": "<p>the actual function to be executed.</p>",
                    "name": "func"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database <code>object</code>. Useful for method chaining</p>"
                }
            ],
            "name": "[\"create_function\"]",
            "longname": "Database#[\"create_function\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22create_function%22%5D",
            "signature": "<span class=\"signature\">(name, func)</span><span class=\"type-signature\"> &rarr; {<a href=\"Database.html\">Database</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Execute a sql statement, and call a callback for each row of result.\r\n    Currently, this method is synchronous, it will not return until the callback\r\n    has been called on every row of the result. But this might change.\r\n    @param {string} sql A string of SQL text. Can contain placeholders\r\n    that will be bound to the parameters given as the second argument\r\n    @param {Statement.BindParams} [params=[]] Parameters to bind to the query\r\n    @param {function(Object<string, Database.SqlValue>):void} callback\r\n    Function to call on each row of result\r\n    @param {function():void} done A function that will be called when\r\n    all rows have been retrieved\r\n    @return {Database} The database object. Useful for method chaining\r\n    @example <caption>Read values from a table</caption>\r\n    db.each(\"SELECT name,age FROM users WHERE age >= $majority\", {$majority:18},\r\n            function (row){console.log(row.name + \" is a grown-up.\")}\r\n    );\r\n     */",
            "meta": {
                "range": [
                    32370,
                    32954
                ],
                "filename": "api.js",
                "lineno": 915,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002249",
                    "name": "Database.prototype[\"each\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "each",
                    "paramnames": [
                        "sql",
                        "params",
                        "callback",
                        "done"
                    ]
                },
                "vars": {
                    "stmt": "module:SqlJs~stmt",
                    "done": "module:SqlJs~done",
                    "callback": "module:SqlJs~callback",
                    "params": "module:SqlJs~params"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Execute a sql statement, and call a callback for each row of result.\nCurrently, this method is synchronous, it will not return until the callback\nhas been called on every row of the result. But this might change.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>A string of SQL text. Can contain placeholders\nthat will be bound to the parameters given as the second argument</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": "[]",
                    "description": "<p>Parameters to bind to the query</p>",
                    "name": "params"
                },
                {
                    "type": {
                        "names": [
                            "function"
                        ]
                    },
                    "description": "<p>Function to call on each row of result</p>",
                    "name": "callback"
                },
                {
                    "type": {
                        "names": [
                            "function"
                        ]
                    },
                    "description": "<p>A function that will be called when\nall rows have been retrieved</p>",
                    "name": "done"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database object. Useful for method chaining</p>"
                }
            ],
            "examples": [
                {
                    "caption": "Read values from a table",
                    "code": "    db.each(\"SELECT name,age FROM users WHERE age >= $majority\", {$majority:18},\r\n            function (row){console.log(row.name + \" is a grown-up.\")}\r\n    );"
                }
            ],
            "name": "[\"each\"]",
            "longname": "Database#[\"each\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22each%22%5D",
            "signature": "<span class=\"signature\">(sql, params<span class=\"signature-attributes\">opt</span>, callback, done)</span><span class=\"type-signature\"> &rarr; {<a href=\"Database.html\">Database</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Execute an SQL query, and returns the result.\r\n    *\r\n    * This is a wrapper against\r\n    * {@link Database.prepare},\r\n    * {@link Statement.bind},\r\n    * {@link Statement.step},\r\n    * {@link Statement.get},\r\n    * and {@link Statement.free}.\r\n    *\r\n    * The result is an array of result elements. There are as many result\r\n    * elements as the number of statements in your sql string (statements are\r\n    * separated by a semicolon)\r\n    *\r\n    * ## Example use\r\n    * We will create the following table, named *test* and query it with a\r\n    * multi-line statement using params:\r\n    *\r\n    * | id | age |  name  |\r\n    * |:--:|:---:|:------:|\r\n    * | 1  |  1  | Ling   |\r\n    * | 2  |  18 | Paul   |\r\n    *\r\n    * We query it like that:\r\n    * ```javascript\r\n    * var db = new SQL.Database();\r\n    * var res = db.exec(\r\n    *     \"DROP TABLE IF EXISTS test;\\n\"\r\n    *     + \"CREATE TABLE test (id INTEGER, age INTEGER, name TEXT);\"\r\n    *     + \"INSERT INTO test VALUES ($id1, :age1, @name1);\"\r\n    *     + \"INSERT INTO test VALUES ($id2, :age2, @name2);\"\r\n    *     + \"SELECT id FROM test;\"\r\n    *     + \"SELECT age,name FROM test WHERE id=$id1\",\r\n    *     {\r\n    *         \"$id1\": 1, \":age1\": 1, \"@name1\": \"Ling\",\r\n    *         \"$id2\": 2, \":age2\": 18, \"@name2\": \"Paul\"\r\n    *     }\r\n    * );\r\n    * ```\r\n    *\r\n    * `res` is now :\r\n    * ```javascript\r\n    *     [\r\n    *         {\"columns\":[\"id\"],\"values\":[[1],[2]]},\r\n    *         {\"columns\":[\"age\",\"name\"],\"values\":[[1,\"Ling\"]]}\r\n    *     ]\r\n    * ```\r\n    *\r\n    @param {string} sql a string containing some SQL text to execute\r\n    @param {Statement.BindParams} [params] When the SQL statement contains\r\n    placeholders, you can pass them in here. They will be bound to the statement\r\n    before it is executed. If you use the params argument as an array,\r\n    you **cannot** provide an sql string that contains several statements\r\n    (separated by `;`). This limitation does not apply to params as an object.\r\n    * @return {Database.QueryExecResult[]} The results of each statement\r\n    */",
            "meta": {
                "range": [
                    29502,
                    31388
                ],
                "filename": "api.js",
                "lineno": 848,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002065",
                    "name": "Database.prototype[\"exec\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "exec",
                    "paramnames": [
                        "sql",
                        "params"
                    ]
                },
                "vars": {
                    "stack": "Database#\"exec\"~stack",
                    "stmt": "module:SqlJs~stmt",
                    "nextSqlPtr": "module:SqlJs~nextSqlPtr",
                    "pzTail": "Database#\"exec\"~pzTail",
                    "results": "Database#\"exec\"~results",
                    "pStmt": "Database#\"exec\"~pStmt",
                    "curresult": "module:SqlJs~curresult"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Execute an SQL query, and returns the result.</p>\n<p>This is a wrapper against\n{@link Database.prepare},\n{@link Statement.bind},\n{@link Statement.step},\n{@link Statement.get},\nand {@link Statement.free}.</p>\n<p>The result is an array of result elements. There are as many result\nelements as the number of statements in your sql string (statements are\nseparated by a semicolon)</p>\n<h2 id=\"example-use\">Example use</h2>\n<p>We will create the following table, named <em>test</em> and query it with a\nmulti-line statement using params:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">age</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Ling</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">Paul</td>\n</tr>\n</tbody>\n</table>\n<p>We query it like that:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>var db = new SQL.Database();\nvar res = db.exec(\n    &quot;DROP TABLE IF EXISTS test;\\n&quot;\n    + &quot;CREATE TABLE test (id INTEGER, age INTEGER, name TEXT);&quot;\n    + &quot;INSERT INTO test VALUES ($id1, :age1, @name1);&quot;\n    + &quot;INSERT INTO test VALUES ($id2, :age2, @name2);&quot;\n    + &quot;SELECT id FROM test;&quot;\n    + &quot;SELECT age,name FROM test WHERE id=$id1&quot;,\n    {\n        &quot;$id1&quot;: 1, &quot;:age1&quot;: 1, &quot;@name1&quot;: &quot;Ling&quot;,\n        &quot;$id2&quot;: 2, &quot;:age2&quot;: 18, &quot;@name2&quot;: &quot;Paul&quot;\n    }\n);\n</code></pre>\n<p><code>res</code> is now :</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    [\n        {&quot;columns&quot;:[&quot;id&quot;],&quot;values&quot;:[[1],[2]]},\n        {&quot;columns&quot;:[&quot;age&quot;,&quot;name&quot;],&quot;values&quot;:[[1,&quot;Ling&quot;]]}\n    ]\n</code></pre>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>a string containing some SQL text to execute</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>When the SQL statement contains\nplaceholders, you can pass them in here. They will be bound to the statement\nbefore it is executed. If you use the params argument as an array,\nyou <strong>cannot</strong> provide an sql string that contains several statements\n(separated by <code>;</code>). This limitation does not apply to params as an object.</p>",
                    "name": "params"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Array.<Database.QueryExecResult>"
                        ]
                    },
                    "description": "<p>The results of each statement</p>"
                }
            ],
            "name": "[\"exec\"]",
            "longname": "Database#[\"exec\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22exec%22%5D",
            "signature": "<span class=\"signature\">(sql, params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {Array.&lt;<a href=\"Database.html#.QueryExecResult\">Database.QueryExecResult</a>>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Exports the contents of the database to a binary array\r\n    @return {Uint8Array} An array of bytes of the SQLite3 database file\r\n     */",
            "meta": {
                "range": [
                    34991,
                    35528
                ],
                "filename": "api.js",
                "lineno": 979,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002416",
                    "name": "Database.prototype[\"export\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "exportDatabase",
                    "paramnames": []
                },
                "vars": {
                    "": null,
                    "this.functions": "Database#functions",
                    "binaryDb": "Database#\"export\"~binaryDb",
                    "this.db": "Database#db"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Exports the contents of the database to a binary array</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Uint8Array"
                        ]
                    },
                    "description": "<p>An array of bytes of the SQLite3 database file</p>"
                }
            ],
            "name": "[\"export\"]",
            "longname": "Database#[\"export\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22export%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {Uint8Array}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Returns the number of changed rows (modified, inserted or deleted)\r\n    by the latest completed INSERT, UPDATE or DELETE statement on the\r\n    database. Executing any other type of SQL statement does not modify\r\n    the value returned by this function.\r\n    @return {number} the number of rows modified\r\n    */",
            "meta": {
                "range": [
                    37187,
                    37304
                ],
                "filename": "api.js",
                "lineno": 1033,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002624",
                    "name": "Database.prototype[\"getRowsModified\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getRowsModified",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Returns the number of changed rows (modified, inserted or deleted)\nby the latest completed INSERT, UPDATE or DELETE statement on the\ndatabase. Executing any other type of SQL statement does not modify\nthe value returned by this function.</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>the number of rows modified</p>"
                }
            ],
            "name": "[\"getRowsModified\"]",
            "longname": "Database#[\"getRowsModified\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getRowsModified%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {number}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Analyze a result code, return null if no error occurred, and throw\r\n    an error with a descriptive message otherwise\r\n    @nodoc\r\n     */",
            "meta": {
                "range": [
                    36607,
                    36860
                ],
                "filename": "api.js",
                "lineno": 1019,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002591",
                    "name": "Database.prototype[\"handleError\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "handleError",
                    "paramnames": [
                        "returnCode"
                    ]
                },
                "vars": {
                    "errmsg": "module:SqlJs~errmsg"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Analyze a result code, return null if no error occurred, and throw\nan error with a descriptive message otherwise</p>",
            "tags": [
                {
                    "originalTitle": "nodoc",
                    "title": "nodoc",
                    "text": ""
                }
            ],
            "name": "[\"handleError\"]",
            "longname": "Database#[\"handleError\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22handleError%22%5D",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Iterate over multiple SQL statements in a SQL string.\r\n     * This function returns an iterator over {@link Statement} objects.\r\n     * You can use a for...of loop to execute the returned statements one by one.\r\n     * @param {string} sql a string of SQL that can contain multiple statements\r\n     * @return {StatementIterator} the resulting statement iterator\r\n     * @example <caption>Get the results of multiple SQL queries</caption>\r\n     * const sql_queries = \"SELECT 1 AS x; SELECT '2' as y\";\r\n     * for (const statement of db.iterateStatements(sql_queries)) {\r\n     *     const sql = statement.getSQL(); // Get the SQL source\r\n     *     const result = statement.getAsObject({}); // Get the row of data\r\n     *     console.log(sql, result);\r\n     * }\r\n     * // This will print:\r\n     * // 'SELECT 1 AS x;' { x: 1 }\r\n     * // \" SELECT '2' as y\" { y: '2' }\r\n     */",
            "meta": {
                "range": [
                    34706,
                    34838
                ],
                "filename": "api.js",
                "lineno": 973,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002400",
                    "name": "Database.prototype[\"iterateStatements\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "iterateStatements",
                    "paramnames": [
                        "sql"
                    ]
                },
                "shortpath": "api.js"
            },
            "description": "<p>Iterate over multiple SQL statements in a SQL string.\nThis function returns an iterator over {@link Statement} objects.\nYou can use a for...of loop to execute the returned statements one by one.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>a string of SQL that can contain multiple statements</p>",
                    "name": "sql"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "StatementIterator"
                        ]
                    },
                    "description": "<p>the resulting statement iterator</p>"
                }
            ],
            "examples": [
                {
                    "caption": "Get the results of multiple SQL queries",
                    "code": "const sql_queries = \"SELECT 1 AS x; SELECT '2' as y\";\rfor (const statement of db.iterateStatements(sql_queries)) {\r    const sql = statement.getSQL(); // Get the SQL source\r    const result = statement.getAsObject({}); // Get the row of data\r    console.log(sql, result);\r}\r// This will print:\r// 'SELECT 1 AS x;' { x: 1 }\r// \" SELECT '2' as y\" { y: '2' }"
                }
            ],
            "name": "[\"iterateStatements\"]",
            "longname": "Database#[\"iterateStatements\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22iterateStatements%22%5D",
            "signature": "<span class=\"signature\">(sql)</span><span class=\"type-signature\"> &rarr; {<a href=\"StatementIterator.html\">StatementIterator</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Prepare an SQL statement\r\n    @param {string} sql a string of SQL, that can contain placeholders\r\n    (`?`, `:VVV`, `:AAA`, `@AAA`)\r\n    @param {Statement.BindParams} [params] values to bind to placeholders\r\n    @return {Statement} the resulting statement\r\n    @throws {String} SQLite error\r\n     */",
            "meta": {
                "range": [
                    33270,
                    33816
                ],
                "filename": "api.js",
                "lineno": 942,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002325",
                    "name": "Database.prototype[\"prepare\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "prepare",
                    "paramnames": [
                        "sql",
                        "params"
                    ]
                },
                "vars": {
                    "pStmt": "Database#\"prepare\"~pStmt",
                    "stmt": "Database#\"prepare\"~stmt",
                    "this.statements[undefined]": "Database#statements[undefined]"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Prepare an SQL statement</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>a string of SQL, that can contain placeholders\n(<code>?</code>, <code>:VVV</code>, <code>:AAA</code>, <code>@AAA</code>)</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>values to bind to placeholders</p>",
                    "name": "params"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Statement"
                        ]
                    },
                    "description": "<p>the resulting statement</p>"
                }
            ],
            "exceptions": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>SQLite error</p>"
                }
            ],
            "name": "[\"prepare\"]",
            "longname": "Database#[\"prepare\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22prepare%22%5D",
            "signature": "<span class=\"signature\">(sql, params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {<a href=\"Statement.html\">Statement</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Execute an SQL query, ignoring the rows it returns.\r\n    @param {string} sql a string containing some SQL text to execute\r\n    @param {Statement.BindParams} [params] When the SQL statement contains\r\n    placeholders, you can pass them in here. They will be bound to the statement\r\n    before it is executed. If you use the params argument, you **cannot**\r\n    provide an sql string that contains several statements (separated by `;`)\r\n    @example\r\n    // Insert values in a table\r\n    db.run(\r\n        \"INSERT INTO test VALUES (:age, :name)\",\r\n        { ':age' : 18, ':name' : 'John' }\r\n    );\r\n    @return {Database} The database object (useful for method chaining)\r\n     */",
            "meta": {
                "range": [
                    26582,
                    27045
                ],
                "filename": "api.js",
                "lineno": 767,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002003",
                    "name": "Database.prototype[\"run\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "run",
                    "paramnames": [
                        "sql",
                        "params"
                    ]
                },
                "vars": {
                    "stmt": "Database#\"run\"~stmt"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Execute an SQL query, ignoring the rows it returns.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>a string containing some SQL text to execute</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>When the SQL statement contains\nplaceholders, you can pass them in here. They will be bound to the statement\nbefore it is executed. If you use the params argument, you <strong>cannot</strong>\nprovide an sql string that contains several statements (separated by <code>;</code>)</p>",
                    "name": "params"
                }
            ],
            "examples": [
                {
                    "caption": "",
                    "code": "// Insert values in a table\r\n    db.run(\r\n        \"INSERT INTO test VALUES (:age, :name)\",\r\n        { ':age' : 18, ':name' : 'John' }\r\n    );\r\n    "
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database object (useful for method chaining)</p>"
                }
            ],
            "name": "[\"run\"]",
            "longname": "Database#[\"run\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22run%22%5D",
            "signature": "<span class=\"signature\">(sql, params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {<a href=\"Database.html\">Database</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @typedef {{\r\n        columns:string[],\r\n        values:Database.SqlValue[][]\r\n    }} Database.QueryExecResult\r\n     * @property {string[]} columns the name of the columns of the result\r\n     * (as returned by {@link Statement.getColumnNames})\r\n     * @property {Database.SqlValue[][]} values one array per row, containing\r\n     * the column values\r\n     */",
            "meta": {
                "filename": "api.js",
                "lineno": 783,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "QueryExecResult",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    },
                    "description": "<p>the name of the columns of the result\n(as returned by {@link Statement.getColumnNames})</p>",
                    "name": "columns"
                },
                {
                    "type": {
                        "names": [
                            "Array.<Array.<Database.SqlValue>>"
                        ]
                    },
                    "description": "<p>one array per row, containing\nthe column values</p>",
                    "name": "values"
                }
            ],
            "memberof": "Database",
            "longname": "Database.QueryExecResult",
            "scope": "static",
            "attribs": "",
            "id": ".QueryExecResult",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>."
            ]
        },
        {
            "comment": "/** @typedef {string|number|null|Uint8Array} Database.SqlValue */",
            "meta": {
                "filename": "api.js",
                "lineno": 259,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "SqlValue",
            "type": {
                "names": [
                    "string",
                    "number",
                    "null",
                    "Uint8Array"
                ]
            },
            "memberof": "Database",
            "longname": "Database.SqlValue",
            "scope": "static",
            "attribs": "",
            "id": ".SqlValue",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>."
            ]
        },
        {
            "comment": "/**\r\n * An unit of energy . Curabitur sollicitudin porttitor turpis vitae rutrum. Mauris interdum neque id massa sollicitudin, fermentum facilisis erat commodo. In at purus a risus aliquam faucibus.\r\n * @class\r\n */",
            "meta": {
                "range": [
                    216,
                    520
                ],
                "filename": "Energy.js",
                "lineno": 5,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003010",
                    "name": "Energy",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Energy.js"
            },
            "name": "Energy",
            "longname": "Energy",
            "kind": "class",
            "classdesc": "<p>An unit of energy . Curabitur sollicitudin porttitor turpis vitae rutrum. Mauris interdum neque id massa sollicitudin, fermentum facilisis erat commodo. In at purus a risus aliquam faucibus.</p>",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Energy",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n\t\t * the amount of energy in this unit\r\n\t\t * @type {number}\r\n\t\t */",
            "meta": {
                "range": [
                    342,
                    360
                ],
                "filename": "Energy.js",
                "lineno": 11,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003018",
                    "name": "this.amount",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Energy.js"
            },
            "description": "<p>the amount of energy in this unit</p>",
            "type": {
                "names": [
                    "number"
                ]
            },
            "name": "amount",
            "longname": "Energy#amount",
            "kind": "member",
            "memberof": "Energy",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "amount",
            "ancestors": [
                "<a href=\"Energy.html\">Energy</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :number</span>"
        },
        {
            "comment": "/**\r\n         * Mauris interdum neque {@link Environment} id massa\r\n         * @type {EnergyUnit}\r\n         */",
            "meta": {
                "range": [
                    493,
                    509
                ],
                "filename": "Energy.js",
                "lineno": 17,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003024",
                    "name": "this.unit",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Energy.js"
            },
            "description": "<p>Mauris interdum neque {@link Environment} id massa</p>",
            "type": {
                "names": [
                    "EnergyUnit"
                ]
            },
            "name": "unit",
            "longname": "Energy#unit",
            "kind": "member",
            "memberof": "Energy",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "unit",
            "ancestors": [
                "<a href=\"Energy.html\">Energy</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :<a href=\"global.html#EnergyUnit\">EnergyUnit</a></span>"
        },
        {
            "comment": "/**\r\n * @typedef {Object} EnergyUnit\r\n * @property {String} foo kajsdh kajhsd\r\n * @property {Array<Array<String>>} hello aksjdh kaj shdkj asd\r\n */",
            "meta": {
                "filename": "Energy.js",
                "lineno": 21,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Energy.js"
            },
            "kind": "typedef",
            "name": "EnergyUnit",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>kajsdh kajhsd</p>",
                    "name": "foo"
                },
                {
                    "type": {
                        "names": [
                            "Array.<Array.<String>>"
                        ]
                    },
                    "description": "<p>aksjdh kaj shdkj asd</p>",
                    "name": "hello"
                }
            ],
            "longname": "EnergyUnit",
            "scope": "global",
            "attribs": "",
            "id": "EnergyUnit",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * Lorem ipsum dolor sit amet, {@link Energy} consectetur adipiscing elit. Vestibulum condimentum tempus diam. Ut eget ultricies metus, vitae ornare turpis. Vivamus lectus metus, euismod quis tortor quis, pretium semper massa. Nulla mauris sapien, faucibus vitae metus et, ultrices fringilla sem. Sed laoreet tempor odio, elementum scelerisque nunc aliquet quis.\r\n *\r\n * @class\r\n */",
            "meta": {
                "range": [
                    389,
                    825
                ],
                "filename": "Environment.js",
                "lineno": 6,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003031",
                    "name": "Environment",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Environment.js"
            },
            "name": "Environment",
            "longname": "Environment",
            "kind": "class",
            "classdesc": "<p>Lorem ipsum dolor sit amet, {@link Energy} consectetur adipiscing elit. Vestibulum condimentum tempus diam. Ut eget ultricies metus, vitae ornare turpis. Vivamus lectus metus, euismod quis tortor quis, pretium semper massa. Nulla mauris sapien, faucibus vitae metus et, ultrices fringilla sem. Sed laoreet tempor odio, elementum scelerisque nunc aliquet quis.</p>",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Environment",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * Lorem ipsum dolor sit amet, {@link Energy} consectetur adipiscing el\r\n * @event Environment#beforeDestroy\r\n * @type {Energy}\r\n * @property {boolean} foo aalks djlas\r\n */",
            "meta": {
                "filename": "Environment.js",
                "lineno": 36,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Environment.js"
            },
            "description": "<p>Lorem ipsum dolor sit amet, {@link Energy} consectetur adipiscing el</p>",
            "kind": "event",
            "name": "beforeDestroy",
            "type": {
                "names": [
                    "Energy"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>aalks djlas</p>",
                    "name": "foo"
                }
            ],
            "memberof": "Environment",
            "longname": "Environment#event:beforeDestroy",
            "scope": "instance",
            "attribs": "",
            "id": "event:beforeDestroy",
            "ancestors": [
                "<a href=\"Environment.html\">Environment</a>#"
            ]
        },
        {
            "comment": "/**\r\n\t\t * All the living things in this environment\r\n\t\t * @type {Array<Alive>}\r\n\t\t */",
            "meta": {
                "range": [
                    534,
                    558
                ],
                "filename": "Environment.js",
                "lineno": 12,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003039",
                    "name": "this.livingThings",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Environment.js"
            },
            "description": "<p>All the living things in this environment</p>",
            "type": {
                "names": [
                    "Array.<Alive>"
                ]
            },
            "name": "livingThings",
            "longname": "Environment#livingThings",
            "kind": "member",
            "memberof": "Environment",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "livingThings",
            "ancestors": [
                "<a href=\"Environment.html\">Environment</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Array.&lt;<a href=\"Alive.html\">Alive</a>></span>"
        },
        {
            "comment": "/**\r\n\t\t * The name of this environment\r\n\t\t * @type {String}\r\n\t\t */",
            "meta": {
                "range": [
                    647,
                    663
                ],
                "filename": "Environment.js",
                "lineno": 18,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003045",
                    "name": "this.name",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Environment.js"
            },
            "description": "<p>The name of this environment</p>",
            "type": {
                "names": [
                    "String"
                ]
            },
            "name": "name",
            "longname": "Environment#name",
            "kind": "member",
            "memberof": "Environment",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "name",
            "ancestors": [
                "<a href=\"Environment.html\">Environment</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :String</span>"
        },
        {
            "comment": "/**\r\n     * Vestibulum condimentum tempus {@link Alive} diam.\r\n\t * @param {EnvironmentConfiguration} config\r\n\t */",
            "meta": {
                "range": [
                    798,
                    822
                ],
                "filename": "Environment.js",
                "lineno": 25,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003050",
                    "name": "Environment#start",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "config"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "Environment.js"
            },
            "description": "<p>Vestibulum condimentum tempus {@link Alive} diam.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "EnvironmentConfiguration"
                        ]
                    },
                    "name": "config"
                }
            ],
            "name": "start",
            "longname": "Environment#start",
            "kind": "function",
            "memberof": "Environment",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "start",
            "signature": "<span class=\"signature\">(config)</span>",
            "ancestors": [
                "<a href=\"Environment.html\">Environment</a>#"
            ]
        },
        {
            "comment": "/**\r\n * @typedef {Object} EnvironmentConfiguration\r\n * @property {String} name\r\n * @property {Map<String,Number>} strange\r\n */",
            "meta": {
                "filename": "Environment.js",
                "lineno": 30,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Environment.js"
            },
            "kind": "typedef",
            "name": "EnvironmentConfiguration",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "names": [
                            "Map.<String, Number>"
                        ]
                    },
                    "name": "strange"
                }
            ],
            "longname": "EnvironmentConfiguration",
            "scope": "global",
            "attribs": "",
            "id": "EnvironmentConfiguration",
            "ancestors": []
        },
        {
            "comment": "/**\r\n* This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document)\r\n* / [sticker](https://core.telegram.org/bots/api/#sticker)\r\n* thumbnail.\r\n\r\n* @typedef {object} PhotoSize\r\n* @property {string} file_id Identifier for this file, which can be used to download or reuse the file\r\n* @property {string} file_unique_id Unique identifier for this file, which is supposed to be the same over time and\r\n*   for different bots. Can't be used to download or reuse the file.\r\n* @property {number} width Photo width\r\n* @property {number} height Photo height\r\n* @property {number} [file_size] *Optional*. File size in bytes\r\n* @see https://core.telegram.org/bots/api/#photosize\r\n*/",
            "meta": {
                "filename": "Alive.js",
                "lineno": 1,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Alive.js"
            },
            "description": "<p>This object represents one size of a photo or a <a href=\"https://core.telegram.org/bots/api/#document\">file</a>\n/ <a href=\"https://core.telegram.org/bots/api/#sticker\">sticker</a>\nthumbnail.</p>",
            "kind": "typedef",
            "name": "PhotoSize",
            "type": {
                "names": [
                    "object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>Identifier for this file, which can be used to download or reuse the file</p>",
                    "name": "file_id"
                },
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>Unique identifier for this file, which is supposed to be the same over time and\nfor different bots. Can't be used to download or reuse the file.</p>",
                    "name": "file_unique_id"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>Photo width</p>",
                    "name": "width"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>Photo height</p>",
                    "name": "height"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "optional": true,
                    "description": "<p><em>Optional</em>. File size in bytes</p>",
                    "name": "file_size"
                }
            ],
            "see": [
                "https://core.telegram.org/bots/api/#photosize"
            ],
            "longname": "PhotoSize",
            "scope": "global",
            "attribs": "",
            "id": "PhotoSize",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * @typedef {{Database:Database, Statement:Statement}} SqlJs\r\n * @property {Database} Database A class that represents an SQLite database\r\n * @property {Statement} Statement The prepared statement class\r\n */",
            "meta": {
                "filename": "api.js",
                "lineno": 23,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "SqlJs",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>A class that represents an SQLite database</p>",
                    "name": "Database"
                },
                {
                    "type": {
                        "names": [
                            "Statement"
                        ]
                    },
                    "description": "<p>The prepared statement class</p>",
                    "name": "Statement"
                }
            ],
            "longname": "SqlJs",
            "scope": "global",
            "attribs": "",
            "id": "SqlJs",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * @typedef {{locateFile:function(string):string}} SqlJsConfig\r\n * @property {function(string):string} locateFile\r\n * a function that returns the full path to a resource given its file name\r\n * @see https://emscripten.org/docs/api_reference/module.html\r\n */",
            "meta": {
                "filename": "api.js",
                "lineno": 28,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "SqlJsConfig",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "function"
                        ]
                    },
                    "description": "<p>a function that returns the full path to a resource given its file name</p>",
                    "name": "locateFile"
                }
            ],
            "see": [
                "https://emscripten.org/docs/api_reference/module.html"
            ],
            "longname": "SqlJsConfig",
            "scope": "global",
            "attribs": "",
            "id": "SqlJsConfig",
            "ancestors": []
        },
        {
            "comment": "/**\r\n    * @classdesc\r\n    * Represents a prepared statement.\r\n    * Prepared statements allow you to have a template sql string,\r\n    * that you can execute multiple times with different parameters.\r\n    *\r\n    * You can't instantiate this class directly, you have to use a\r\n    * {@link Database} object in order to create a statement.\r\n    *\r\n    * **Warning**: When you close a database (using db.close()),\r\n    * all its statements are closed too and become unusable.\r\n    *\r\n    * Statements can't be created by the API user directly, only by\r\n    * Database::prepare\r\n    *\r\n    * @see Database.html#prepare-dynamic\r\n    * @see https://en.wikipedia.org/wiki/Prepared_statement\r\n    *\r\n    * @constructs Statement\r\n    * @memberof module:SqlJs\r\n    * @param {number} stmt1 The SQLite statement reference\r\n    * @param {Database} db The database from which this statement was created\r\n     */",
            "meta": {
                "range": [
                    7474,
                    7776
                ],
                "filename": "api.js",
                "lineno": 250,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000520",
                    "name": "Statement",
                    "type": "FunctionDeclaration",
                    "paramnames": [
                        "stmt1",
                        "db"
                    ]
                },
                "vars": {
                    "this.stmt": "Statement#stmt",
                    "this.db": "Statement#db",
                    "this.pos": "Statement#pos",
                    "this.allocatedmem": "Statement#allocatedmem"
                },
                "shortpath": "api.js"
            },
            "classdesc": "<p>Represents a prepared statement.\nPrepared statements allow you to have a template sql string,\nthat you can execute multiple times with different parameters.</p>\n<p>You can't instantiate this class directly, you have to use a\n{@link Database} object in order to create a statement.</p>\n<p><strong>Warning</strong>: When you close a database (using db.close()),\nall its statements are closed too and become unusable.</p>\n<p>Statements can't be created by the API user directly, only by\nDatabase::prepare</p>",
            "see": [
                "Database.html#prepare-dynamic",
                "https://en.wikipedia.org/wiki/Prepared_statement"
            ],
            "alias": "Statement",
            "kind": "class",
            "memberof": "module:SqlJs",
            "params": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>The SQLite statement reference</p>",
                    "name": "stmt1"
                },
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database from which this statement was created</p>",
                    "name": "db"
                }
            ],
            "name": "Statement",
            "longname": "Statement",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Statement",
            "signature": "<span class=\"signature\">(stmt1, db)</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>"
            ]
        },
        {
            "comment": "/** Bind values to the parameters, after having reset the statement.\r\n    * If values is null, do nothing and return true.\r\n    *\r\n    * SQL statements can have parameters,\r\n    * named *'?', '?NNN', ':VVV', '@VVV', '$VVV'*,\r\n    * where NNN is a number and VVV a string.\r\n    * This function binds these parameters to the given values.\r\n    *\r\n    * *Warning*: ':', '@', and '$' are included in the parameters names\r\n    *\r\n    * ## Value types\r\n    * Javascript type  | SQLite type\r\n    * -----------------| -----------\r\n    * number           | REAL, INTEGER\r\n    * boolean          | INTEGER\r\n    * string           | TEXT\r\n    * Array, Uint8Array| BLOB\r\n    * null             | NULL\r\n    *\r\n    * @example <caption>Bind values to named parameters</caption>\r\n    *     var stmt = db.prepare(\r\n    *         \"UPDATE test SET a=@newval WHERE id BETWEEN $mini AND $maxi\"\r\n    *     );\r\n    *     stmt.bind({$mini:10, $maxi:20, '@newval':5});\r\n    *\r\n    * @example <caption>Bind values to anonymous parameters</caption>\r\n    * // Create a statement that contains parameters like '?', '?NNN'\r\n    * var stmt = db.prepare(\"UPDATE test SET a=? WHERE id BETWEEN ? AND ?\");\r\n    * // Call Statement.bind with an array as parameter\r\n    * stmt.bind([5, 10, 20]);\r\n    *\r\n    * @see http://www.sqlite.org/datatype3.html\r\n    * @see http://www.sqlite.org/lang_expr.html#varparam\r\n    * @param {Statement.BindParams} values The values to bind\r\n    * @return {boolean} true if it worked\r\n    * @throws {String} SQLite Error\r\n    */",
            "meta": {
                "range": [
                    9507,
                    9884
                ],
                "filename": "api.js",
                "lineno": 301,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000550",
                    "name": "Statement.prototype[\"bind\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "bind",
                    "paramnames": [
                        "values"
                    ]
                },
                "shortpath": "api.js"
            },
            "description": "<p>Bind values to the parameters, after having reset the statement.\nIf values is null, do nothing and return true.</p>\n<p>SQL statements can have parameters,\nnamed <em>'?', '?NNN', ':VVV', '@VVV', '$VVV'</em>,\nwhere NNN is a number and VVV a string.\nThis function binds these parameters to the given values.</p>\n<p><em>Warning</em>: ':', '@', and '$' are included in the parameters names</p>\n<h2 id=\"value-types\">Value types</h2>\n<table>\n<thead>\n<tr>\n<th>Javascript type</th>\n<th>SQLite type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>number</td>\n<td>REAL, INTEGER</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>INTEGER</td>\n</tr>\n<tr>\n<td>string</td>\n<td>TEXT</td>\n</tr>\n<tr>\n<td>Array, Uint8Array</td>\n<td>BLOB</td>\n</tr>\n<tr>\n<td>null</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>",
            "examples": [
                {
                    "caption": "Bind values to named parameters",
                    "code": "    var stmt = db.prepare(\r        \"UPDATE test SET a=@newval WHERE id BETWEEN $mini AND $maxi\"\r    );\r    stmt.bind({$mini:10, $maxi:20, '@newval':5});"
                },
                {
                    "caption": "Bind values to anonymous parameters",
                    "code": "// Create a statement that contains parameters like '?', '?NNN'\rvar stmt = db.prepare(\"UPDATE test SET a=? WHERE id BETWEEN ? AND ?\");\r// Call Statement.bind with an array as parameter\rstmt.bind([5, 10, 20]);"
                }
            ],
            "see": [
                "http://www.sqlite.org/datatype3.html",
                "http://www.sqlite.org/lang_expr.html#varparam"
            ],
            "params": [
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "description": "<p>The values to bind</p>",
                    "name": "values"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>true if it worked</p>"
                }
            ],
            "exceptions": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>SQLite Error</p>"
                }
            ],
            "name": "[\"bind\"]",
            "longname": "Statement#[\"bind\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22bind%22%5D",
            "signature": "<span class=\"signature\">(values)</span><span class=\"type-signature\"> &rarr; {boolean}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Free the memory used by the statement\r\n    @return {boolean} true in case of success\r\n     */",
            "meta": {
                "range": [
                    19997,
                    20247
                ],
                "filename": "api.js",
                "lineno": 597,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001553",
                    "name": "Statement.prototype[\"free\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "free",
                    "paramnames": []
                },
                "vars": {
                    "res": "module:SqlJs~res",
                    "this.stmt": "Statement#stmt"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Free the memory used by the statement</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>true in case of success</p>"
                }
            ],
            "name": "[\"free\"]",
            "longname": "Statement#[\"free\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22free%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {boolean}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Free the memory allocated during parameter binding */",
            "meta": {
                "range": [
                    19708,
                    19887
                ],
                "filename": "api.js",
                "lineno": 588,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001524",
                    "name": "Statement.prototype[\"freemem\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "freemem",
                    "paramnames": []
                },
                "vars": {
                    "mem": "module:SqlJs~mem"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Free the memory allocated during parameter binding</p>",
            "name": "[\"freemem\"]",
            "longname": "Statement#[\"freemem\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22freemem%22%5D",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get one row of results of a statement.\r\n    If the first parameter is not provided, step must have been called before.\r\n    @param {Statement.BindParams} [params] If set, the values will be bound\r\n    to the statement before it is executed\r\n    @return {Database.SqlValue[]} One row of result\r\n    @example <caption>Print all the rows of the table test to the console</caption>\r\n    var stmt = db.prepare(\"SELECT * FROM test\");\r\n    while (stmt.step()) console.log(stmt.get());\r\n     */",
            "meta": {
                "range": [
                    12042,
                    12914
                ],
                "filename": "api.js",
                "lineno": 372,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000801",
                    "name": "Statement.prototype[\"get\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "get",
                    "paramnames": [
                        "params"
                    ]
                },
                "vars": {
                    "results1": "Statement#\"get\"~results1",
                    "ref": "Statement#\"get\"~ref",
                    "field": "module:SqlJs~field"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get one row of results of a statement.\nIf the first parameter is not provided, step must have been called before.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>If set, the values will be bound\nto the statement before it is executed</p>",
                    "name": "params"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Array.<Database.SqlValue>"
                        ]
                    },
                    "description": "<p>One row of result</p>"
                }
            ],
            "examples": [
                {
                    "caption": "Print all the rows of the table test to the console",
                    "code": "    var stmt = db.prepare(\"SELECT * FROM test\");\r\n    while (stmt.step()) console.log(stmt.get());"
                }
            ],
            "name": "[\"get\"]",
            "longname": "Statement#[\"get\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22get%22%5D",
            "signature": "<span class=\"signature\">(params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {Array.&lt;<a href=\"Database.html#.SqlValue\">Database.SqlValue</a>>}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get one row of result as a javascript object, associating column names\r\n    with their value in the current row.\r\n    @param {Statement.BindParams} [params] If set, the values will be bound\r\n    to the statement, and it will be executed\r\n    @return {Object<string, Database.SqlValue>} The row of result\r\n    @see {@link Statement.get}\r\n    @example\r\n        var stmt = db.prepare(\r\n            \"SELECT 5 AS nbr, x'010203' AS data, NULL AS null_value;\"\r\n        );\r\n        stmt.step(); // Execute the statement\r\n        console.log(stmt.getAsObject());\r\n        // Will print {nbr:5, data: Uint8Array([1,2,3]), null_value:null}\r\n     */",
            "meta": {
                "range": [
                    14252,
                    14612
                ],
                "filename": "api.js",
                "lineno": 428,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000956",
                    "name": "Statement.prototype[\"getAsObject\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getAsObject",
                    "paramnames": [
                        "params"
                    ]
                },
                "vars": {
                    "values": "Statement#\"getAsObject\"~values",
                    "names": "Statement#\"getAsObject\"~names",
                    "rowObject": "Statement#\"getAsObject\"~rowObject",
                    "i": "module:SqlJs~i",
                    "name": "Statement#\"getAsObject\"~name",
                    "rowObject[undefined]": "Statement#\"getAsObject\"~rowObject.undefined]"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get one row of result as a javascript object, associating column names\nwith their value in the current row.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>If set, the values will be bound\nto the statement, and it will be executed</p>",
                    "name": "params"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Object.<string, Database.SqlValue>"
                        ]
                    },
                    "description": "<p>The row of result</p>"
                }
            ],
            "see": [
                "{@link Statement.get}"
            ],
            "examples": [
                {
                    "caption": "",
                    "code": "var stmt = db.prepare(\r\n            \"SELECT 5 AS nbr, x'010203' AS data, NULL AS null_value;\"\r\n        );\r\n        stmt.step(); // Execute the statement\r\n        console.log(stmt.getAsObject());\r\n        // Will print {nbr:5, data: Uint8Array([1,2,3]), null_value:null}"
                }
            ],
            "name": "[\"getAsObject\"]",
            "longname": "Statement#[\"getAsObject\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getAsObject%22%5D",
            "signature": "<span class=\"signature\">(params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {Object.&lt;string, <a href=\"Database.html#.SqlValue\">Database.SqlValue</a>>}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get the list of column names of a row of result of a statement.\r\n    @return {string[]} The names of the columns\r\n    @example\r\n    var stmt = db.prepare(\r\n        \"SELECT 5 AS nbr, x'616200' AS data, NULL AS null_value;\"\r\n    );\r\n    stmt.step(); // Execute the statement\r\n    console.log(stmt.getColumnNames());\r\n    // Will print ['nbr','data','null_value']\r\n     */",
            "meta": {
                "range": [
                    13300,
                    13598
                ],
                "filename": "api.js",
                "lineno": 406,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000909",
                    "name": "Statement.prototype[\"getColumnNames\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getColumnNames",
                    "paramnames": []
                },
                "vars": {
                    "results1": "Statement#\"getColumnNames\"~results1",
                    "ref": "Statement#\"getColumnNames\"~ref",
                    "i": "module:SqlJs~i"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get the list of column names of a row of result of a statement.</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    },
                    "description": "<p>The names of the columns</p>"
                }
            ],
            "examples": [
                {
                    "caption": "",
                    "code": "var stmt = db.prepare(\r\n        \"SELECT 5 AS nbr, x'616200' AS data, NULL AS null_value;\"\r\n    );\r\n    stmt.step(); // Execute the statement\r\n    console.log(stmt.getColumnNames());\r\n    // Will print ['nbr','data','null_value']"
                }
            ],
            "name": "[\"getColumnNames\"]",
            "longname": "Statement#[\"getColumnNames\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getColumnNames%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {Array.&lt;string>}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get the SQLite's normalized version of the SQL string used in\r\n    preparing this statement.  The meaning of \"normalized\" is not\r\n    well-defined: see {@link https://sqlite.org/c3ref/expanded_sql.html\r\n    the SQLite documentation}.\r\n     @example\r\n     db.run(\"create table test (x integer);\");\r\n     stmt = db.prepare(\"select * from test where x = 42\");\r\n     // returns \"SELECT*FROM test WHERE x=?;\"\r\n     @return {string} The normalized SQL string\r\n     */",
            "meta": {
                "range": [
                    15304,
                    15433
                ],
                "filename": "api.js",
                "lineno": 454,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001032",
                    "name": "Statement.prototype[\"getNormalizedSQL\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getNormalizedSQL",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get the SQLite's normalized version of the SQL string used in\npreparing this statement.  The meaning of &quot;normalized&quot; is not\nwell-defined: see {@link https://sqlite.org/c3ref/expanded_sql.html\nthe SQLite documentation}.</p>",
            "examples": [
                {
                    "caption": "",
                    "code": "db.run(\"create table test (x integer);\");\r\n     stmt = db.prepare(\"select * from test where x = 42\");\r\n     // returns \"SELECT*FROM test WHERE x=?;\"\r\n     "
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>The normalized SQL string</p>"
                }
            ],
            "name": "[\"getNormalizedSQL\"]",
            "longname": "Statement#[\"getNormalizedSQL\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getNormalizedSQL%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {string}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get the SQL string used in preparing this statement.\r\n     @return {string} The SQL string\r\n     */",
            "meta": {
                "range": [
                    14728,
                    14826
                ],
                "filename": "api.js",
                "lineno": 441,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001016",
                    "name": "Statement.prototype[\"getSQL\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getSQL",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get the SQL string used in preparing this statement.</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>The SQL string</p>"
                }
            ],
            "name": "[\"getSQL\"]",
            "longname": "Statement#[\"getSQL\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getSQL%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {string}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Reset a statement, so that it's parameters can be bound to new values\r\n    It also clears all previous bindings, freeing the memory used\r\n    by bound parameters.\r\n     */",
            "meta": {
                "range": [
                    19411,
                    19638
                ],
                "filename": "api.js",
                "lineno": 580,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001493",
                    "name": "Statement.prototype[\"reset\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "reset",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Reset a statement, so that it's parameters can be bound to new values\nIt also clears all previous bindings, freeing the memory used\nby bound parameters.</p>",
            "name": "[\"reset\"]",
            "longname": "Statement#[\"reset\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22reset%22%5D",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Shorthand for bind + step + reset\r\n    Bind the values, execute the statement, ignoring the rows it returns,\r\n    and resets it\r\n    @param {Statement.BindParams} [values] Value to bind to the statement\r\n     */",
            "meta": {
                "range": [
                    15661,
                    15854
                ],
                "filename": "api.js",
                "lineno": 462,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001048",
                    "name": "Statement.prototype[\"run\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "run",
                    "paramnames": [
                        "values"
                    ]
                },
                "shortpath": "api.js"
            },
            "description": "<p>Shorthand for bind + step + reset\nBind the values, execute the statement, ignoring the rows it returns,\nand resets it</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>Value to bind to the statement</p>",
                    "name": "values"
                }
            ],
            "name": "[\"run\"]",
            "longname": "Statement#[\"run\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22run%22%5D",
            "signature": "<span class=\"signature\">(values<span class=\"signature-attributes\">opt</span>)</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Execute the statement, fetching the next line of result,\r\n    that can be retrieved with {@link Statement.get}.\r\n    @return {boolean} true if a row of result available\r\n    @throws {String} SQLite Error\r\n     */",
            "meta": {
                "range": [
                    10113,
                    10539
                ],
                "filename": "api.js",
                "lineno": 317,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000604",
                    "name": "Statement.prototype[\"step\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "step",
                    "paramnames": []
                },
                "vars": {
                    "this.pos": "Statement#pos",
                    "ret": "Statement#\"step\"~ret"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Execute the statement, fetching the next line of result,\nthat can be retrieved with {@link Statement.get}.</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>true if a row of result available</p>"
                }
            ],
            "exceptions": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>SQLite Error</p>"
                }
            ],
            "name": "[\"step\"]",
            "longname": "Statement#[\"step\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22step%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {boolean}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** @typedef {\r\n        Database.SqlValue[]|Object<string, Database.SqlValue>|null\r\n    } Statement.BindParams\r\n     */",
            "meta": {
                "filename": "api.js",
                "lineno": 260,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "BindParams",
            "type": {
                "names": [
                    "Array.<Database.SqlValue>",
                    "Object.<string, Database.SqlValue>",
                    "null"
                ]
            },
            "memberof": "Statement",
            "longname": "Statement.BindParams",
            "scope": "static",
            "attribs": "",
            "id": ".BindParams",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>."
            ]
        },
        {
            "comment": "/**\r\n     * @classdesc\r\n     * An iterator over multiple SQL statements in a string,\r\n     * preparing and returning a Statement object for the next SQL\r\n     * statement on each iteration.\r\n     *\r\n     * You can't instantiate this class directly, you have to use a\r\n     * {@link Database} object in order to create a statement iterator\r\n     *\r\n     * {@see Database#iterateStatements}\r\n     *\r\n     * @example\r\n     * // loop over and execute statements in string sql\r\n     * for (let statement of db.iterateStatements(sql)) {\r\n     *     statement.step();\r\n     *     // get results, etc.\r\n     *     // do not call statement.free() manually, each statement is freed\r\n     *     // before the next one is parsed\r\n     * }\r\n     *\r\n     * // capture any bad query exceptions with feedback\r\n     * // on the bad sql\r\n     * let it = db.iterateStatements(sql);\r\n     * try {\r\n     *     for (let statement of it) {\r\n     *         statement.step();\r\n     *     }\r\n     * } catch(e) {\r\n     *     console.log(\r\n     *         `The SQL string \"${it.getRemainingSQL()}\" ` +\r\n     *         `contains the following error: ${e}`\r\n     *     );\r\n     * }\r\n     *\r\n     * @implements {Iterator<Statement>}\r\n     * @implements {Iterable<Statement>}\r\n     * @constructs StatementIterator\r\n     * @memberof module:SqlJs\r\n     * @param {string} sql A string containing multiple SQL statements\r\n     * @param {Database} db The database from which this iterator was created\r\n     */",
            "meta": {
                "range": [
                    21731,
                    22163
                ],
                "filename": "api.js",
                "lineno": 646,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001599",
                    "name": "StatementIterator",
                    "type": "FunctionDeclaration",
                    "paramnames": [
                        "sql",
                        "db"
                    ]
                },
                "vars": {
                    "this.db": "StatementIterator#db",
                    "sz": "StatementIterator~sz",
                    "this.sqlPtr": "StatementIterator#sqlPtr",
                    "this.nextSqlPtr": "StatementIterator#nextSqlPtr",
                    "this.nextSqlString": "StatementIterator#nextSqlString",
                    "this.activeStatement": "StatementIterator#activeStatement"
                },
                "shortpath": "api.js"
            },
            "classdesc": "<p>An iterator over multiple SQL statements in a string,\npreparing and returning a Statement object for the next SQL\nstatement on each iteration.</p>\n<p>You can't instantiate this class directly, you have to use a\n{@link Database} object in order to create a statement iterator</p>\n<p>{@see Database#iterateStatements}</p>",
            "examples": [
                {
                    "caption": "",
                    "code": "// loop over and execute statements in string sql\rfor (let statement of db.iterateStatements(sql)) {\r    statement.step();\r    // get results, etc.\r    // do not call statement.free() manually, each statement is freed\r    // before the next one is parsed\r}\r\r// capture any bad query exceptions with feedback\r// on the bad sql\rlet it = db.iterateStatements(sql);\rtry {\r    for (let statement of it) {\r        statement.step();\r    }\r} catch(e) {\r    console.log(\r        `The SQL string \"${it.getRemainingSQL()}\" ` +\r        `contains the following error: ${e}`\r    );\r}"
                }
            ],
            "implements": [
                "Iterator<Statement>",
                "Iterable<Statement>"
            ],
            "alias": "StatementIterator",
            "kind": "class",
            "memberof": "module:SqlJs",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>A string containing multiple SQL statements</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database from which this iterator was created</p>",
                    "name": "db"
                }
            ],
            "name": "StatementIterator",
            "longname": "StatementIterator",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "StatementIterator",
            "signature": "<span class=\"signature\">(sql, db)</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>"
            ]
        },
        {
            "comment": "/** Get any un-executed portions remaining of the original SQL string\r\n     @return {String}\r\n     */",
            "meta": {
                "range": [
                    24381,
                    24689
                ],
                "filename": "api.js",
                "lineno": 718,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001876",
                    "name": "StatementIterator.prototype[\"getRemainingSQL\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getRemainder",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get any un-executed portions remaining of the original SQL string</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    }
                }
            ],
            "name": "[\"getRemainingSQL\"]",
            "longname": "StatementIterator#[\"getRemainingSQL\"]",
            "kind": "function",
            "memberof": "StatementIterator",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getRemainingSQL%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {String}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"StatementIterator.html\">StatementIterator</a>#"
            ]
        },
        {
            "comment": "/** Prepare the next available SQL statement\r\n     @return {StatementIterator.StatementIteratorResult}\r\n     @throws {String} SQLite error or invalid iterator error\r\n     */",
            "meta": {
                "range": [
                    22722,
                    24135
                ],
                "filename": "api.js",
                "lineno": 670,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001666",
                    "name": "StatementIterator.prototype[\"next\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "next",
                    "paramnames": []
                },
                "vars": {
                    "this.activeStatement": "StatementIterator#activeStatement",
                    "stack": "StatementIterator#\"next\"~stack",
                    "pzTail": "StatementIterator#\"next\"~pzTail",
                    "this.nextSqlPtr": "StatementIterator#nextSqlPtr",
                    "pStmt": "StatementIterator#\"next\"~pStmt",
                    "this.db.statements[undefined]": "StatementIterator#db.statements[undefined]",
                    "this.nextSqlString": "StatementIterator#nextSqlString"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Prepare the next available SQL statement</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "StatementIterator.StatementIteratorResult"
                        ]
                    }
                }
            ],
            "exceptions": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>SQLite error or invalid iterator error</p>"
                }
            ],
            "name": "[\"next\"]",
            "longname": "StatementIterator#[\"next\"]",
            "kind": "function",
            "memberof": "StatementIterator",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22next%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {<a href=\"StatementIterator.html#.StatementIteratorResult\">StatementIterator.StatementIteratorResult</a>}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"StatementIterator.html\">StatementIterator</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @typedef {{ done:true, value:undefined } |\r\n     *           { done:false, value:Statement}}\r\n     *           StatementIterator.StatementIteratorResult\r\n     * @property {Statement} value the next available Statement\r\n     * (as returned by {@link Database.prepare})\r\n     * @property {boolean} done true if there are no more available statements\r\n     */",
            "meta": {
                "filename": "api.js",
                "lineno": 658,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "StatementIteratorResult",
            "type": {
                "names": [
                    "Object",
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "Statement"
                        ]
                    },
                    "description": "<p>the next available Statement\n(as returned by {@link Database.prepare})</p>",
                    "name": "value"
                },
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>true if there are no more available statements</p>",
                    "name": "done"
                }
            ],
            "memberof": "StatementIterator",
            "longname": "StatementIterator.StatementIteratorResult",
            "scope": "static",
            "attribs": "",
            "id": ".StatementIteratorResult",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"StatementIterator.html\">StatementIterator</a>."
            ]
        },
        {
            "comment": "/**\r\n * Constructor should be hidden\r\n * @hideconstructor\r\n */",
            "meta": {
                "range": [
                    64,
                    256
                ],
                "filename": "HideConstructor.js",
                "lineno": 5,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003057",
                    "name": "Test",
                    "type": "ClassDeclaration",
                    "paramnames": [
                        "hidemepls"
                    ]
                },
                "shortpath": "HideConstructor.js"
            },
            "name": "Test",
            "longname": "Test",
            "kind": "class",
            "classdesc": "<p>Constructor should be hidden</p>",
            "hideconstructor": true,
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Test",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * \r\n     * @param {TestConfigObject} config \r\n     */",
            "meta": {
                "range": [
                    229,
                    253
                ],
                "filename": "HideConstructor.js",
                "lineno": 14,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003071",
                    "name": "Test#start",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "config"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "HideConstructor.js"
            },
            "params": [
                {
                    "type": {
                        "names": [
                            "TestConfigObject"
                        ]
                    },
                    "name": "config"
                }
            ],
            "name": "start",
            "longname": "Test#start",
            "kind": "function",
            "memberof": "Test",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "start",
            "signature": "<span class=\"signature\">(config)</span>",
            "ancestors": [
                "<a href=\"Test.html\">Test</a>#"
            ]
        },
        {
            "comment": "/**\r\n * Donec imperdiet dignissim semper. Sed vehicula purus dui, eget porta lectus convallis sagittis. Suspendisse ac lectus dignissim, tincidunt nisi quis, gravida metus.\r\n * @class\r\n * @extends Alive\r\n */",
            "meta": {
                "range": [
                    209,
                    660
                ],
                "filename": "Tree.js",
                "lineno": 6,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003207",
                    "name": "Tree",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Tree.js"
            },
            "name": "Tree",
            "longname": "Tree",
            "kind": "class",
            "classdesc": "<p>Donec imperdiet dignissim semper. Sed vehicula purus dui, eget porta lectus convallis sagittis. Suspendisse ac lectus dignissim, tincidunt nisi quis, gravida metus.</p>",
            "augments": [
                "Alive"
            ],
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Tree",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * A constant.\r\n     * @readonly\r\n     * @deprecated This is no longer used\r\n     */",
            "meta": {
                "range": [
                    1576,
                    1584
                ],
                "filename": "Alive.js",
                "lineno": 56,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000025",
                    "name": "FOO",
                    "type": "ClassProperty"
                },
                "shortpath": "Alive.js"
            },
            "name": "FOO",
            "longname": "Tree#FOO",
            "kind": "member",
            "description": "<p>A constant.</p>",
            "readonly": true,
            "deprecated": "This is no longer used",
            "memberof": "Tree",
            "scope": "instance",
            "inherits": "Alive#FOO",
            "inherited": true,
            "overrides": "Alive#FOO",
            "attribs": "<span class=\"type-signature\">(readonly) </span>",
            "id": "FOO",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n         * This is a number array.\r\n         * @constant\r\n         * @type Object\r\n         * @default\r\n         */",
            "meta": {
                "range": [
                    1373,
                    1464
                ],
                "filename": "Alive.js",
                "lineno": 46,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000016",
                    "name": "this.NUMBER_ARRAY",
                    "type": "ObjectExpression",
                    "value": "{\"google\":\"Google\",\"games\":\"Games\"}",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "name": "NUMBER_ARRAY",
            "longname": "Tree#NUMBER_ARRAY",
            "kind": "member",
            "description": "<p>This is a number array.</p>",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "defaultvalue": "<pre class='prettyprint'><code class='nohljsln compact'>{\"google\":\"Google\",\"games\":\"Games\"}</code></pre>",
            "defaultvaluetype": "object",
            "memberof": "Tree",
            "scope": "instance",
            "inherits": "Alive#NUMBER_ARRAY",
            "inherited": true,
            "overrides": "Alive#NUMBER_ARRAY",
            "attribs": "<span class=\"type-signature\">(constant) </span>",
            "id": "NUMBER_ARRAY",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Object</span>"
        },
        {
            "comment": "/**\r\n\t\t * Donec imperdiet dignissim\r\n\t\t * @type {Array<Alive>}\r\n\t\t */",
            "meta": {
                "range": [
                    363,
                    383
                ],
                "filename": "Tree.js",
                "lineno": 13,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003219",
                    "name": "this.branches",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Tree.js"
            },
            "description": "<p>Donec imperdiet dignissim</p>",
            "type": {
                "names": [
                    "Array.<Alive>"
                ]
            },
            "name": "branches",
            "longname": "Tree#branches",
            "kind": "member",
            "memberof": "Tree",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "branches",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Array.&lt;<a href=\"Alive.html\">Alive</a>></span>"
        },
        {
            "comment": "/**\r\n\t * @param {Environment} environment the environment when this Alive thing is surviving\r\n\t * @return {Energy} the energy wasted in this surviving instance\r\n\t * @method\r\n\t * @fires Tree.crop\r\n\t * @Throws Err\r\n\t */",
            "meta": {
                "range": [
                    620,
                    657
                ],
                "filename": "Tree.js",
                "lineno": 22,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003224",
                    "name": "Tree#crop",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Tree.js"
            },
            "params": [
                {
                    "type": {
                        "names": [
                            "Environment"
                        ]
                    },
                    "description": "<p>the environment when this Alive thing is surviving</p>",
                    "name": "environment"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    },
                    "description": "<p>the energy wasted in this surviving instance</p>"
                }
            ],
            "kind": "function",
            "fires": [
                "Tree.event:crop"
            ],
            "exceptions": [
                {
                    "description": "<p>Err</p>"
                }
            ],
            "name": "crop",
            "longname": "Tree#crop",
            "memberof": "Tree",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "crop",
            "signature": "<span class=\"signature\">(environment)</span><span class=\"type-signature\"> &rarr; {<a href=\"Energy.html\">Energy</a>}</span>",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * Text\r\n     * > Text\r\n     * \r\n     * \r\n     *```js\r\n     * code\r\n     *```\r\n     *\r\n     * \r\n     * > Note that commands are not matched in captions or in the middle of the text.\r\n     */",
            "meta": {
                "range": [
                    2208,
                    2250
                ],
                "filename": "Alive.js",
                "lineno": 80,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000034",
                    "name": "Alive#gameQuery",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "name": "gameQuery",
            "longname": "Tree#gameQuery",
            "kind": "function",
            "description": "<p>Text</p>\n<blockquote>\n<p>Text</p>\n</blockquote>\n<pre class=\"prettyprint source lang-js\"><code>code\n</code></pre>\n<blockquote>\n<p>Note that commands are not matched in captions or in the middle of the text.</p>\n</blockquote>",
            "memberof": "Tree",
            "scope": "instance",
            "inherits": "Alive#gameQuery",
            "inherited": true,
            "overrides": "Alive#gameQuery",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "gameQuery",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @param {array<object|function|array|number|string|undefined|null|Symbol|boolean|Energy>} life This is an array of many things.\r\n     * @return {Energy} the energy wasted in this surviving instance\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu\r\n     * @method\r\n     * @deprecated\r\n     */",
            "meta": {
                "range": [
                    1953,
                    1997
                ],
                "filename": "Alive.js",
                "lineno": 65,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000027",
                    "name": "Alive#survive",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "life"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "name": "survive",
            "longname": "Tree#survive",
            "kind": "function",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    },
                    "description": "<p>the energy wasted in this surviving instance</p>"
                }
            ],
            "tags": [
                {
                    "originalTitle": "link",
                    "title": "link",
                    "text": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu",
                    "value": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu"
                }
            ],
            "deprecated": true,
            "memberof": "Tree",
            "scope": "instance",
            "params": [
                {
                    "type": {
                        "names": [
                            "array.<(object|function()|array|number|string|undefined|null|Symbol|boolean|Energy)>"
                        ]
                    },
                    "description": "<p>This is an array of many things.</p>",
                    "name": "life"
                }
            ],
            "inherits": "Alive#survive",
            "inherited": true,
            "overrides": "Alive#survive",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "survive",
            "signature": "<span class=\"signature\">(life)</span><span class=\"type-signature\"> &rarr; {<a href=\"Energy.html\">Energy</a>}</span>",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ]
        },
        {
            "comment": "/**\r\n * Class World defines the coordinate system for the model.\r\n * It has transforms for multiple coordinate systems.\r\n *\r\n * The world is defined by an object with 6 properties:\r\n *\r\n *          WorldOptions = {\r\n *              minX: integer,\r\n *              maxX: integer,\r\n *              minY: integer,\r\n *              maxY: integer,\r\n *              minZ: integer,\r\n *              maxZ: integer,\r\n *          }\r\n */",
            "meta": {
                "range": [
                    1108,
                    1932
                ],
                "filename": "World.js",
                "lineno": 35,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003236",
                    "name": "World",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "World.js"
            },
            "classdesc": "<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>",
            "name": "World",
            "longname": "World",
            "kind": "class",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "World",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * Return a default options object, origin at center.\r\n     *\r\n     * @param {number} [maxX=16] Integer max X value\r\n     * @param {number} [maxY=maxX] Integer max Y value\r\n     * @param {number} [maxZ=Math.max(maxX, maxY)] Integer max Z value\r\n     * @returns WorldOptions\r\n     */",
            "meta": {
                "range": [
                    1553,
                    1929
                ],
                "filename": "World.js",
                "lineno": 53,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003253",
                    "name": "World.defaultOptions",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "maxX",
                        "maxY",
                        "maxZ"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "World.js"
            },
            "description": "<p>Return a default options object, origin at center.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": 16,
                    "description": "<p>Integer max X value</p>",
                    "name": "maxX"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": "maxX",
                    "description": "<p>Integer max Y value</p>",
                    "name": "maxY"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": "Math.max(maxX, maxY)",
                    "description": "<p>Integer max Z value</p>",
                    "name": "maxZ"
                }
            ],
            "returns": [
                {
                    "description": "<p>WorldOptions</p>"
                }
            ],
            "name": "defaultOptions",
            "longname": "World.defaultOptions",
            "kind": "function",
            "memberof": "World",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".defaultOptions",
            "signature": "<span class=\"signature\">(maxX<span class=\"signature-attributes\">opt</span>, maxY<span class=\"signature-attributes\">opt</span>, maxZ<span class=\"signature-attributes\">opt</span>)</span>",
            "ancestors": [
                "<a href=\"World.html\">World</a>."
            ]
        },
        {
            "comment": "/**\r\n * Generate the Fibonacci sequence of numbers.\r\n *\r\n * @yields {number} The next number in the Fibonacci sequence.\r\n */",
            "meta": {
                "range": [
                    787,
                    812
                ],
                "filename": "Apple.js",
                "lineno": 38,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002997",
                    "name": "fibonacci",
                    "type": "FunctionDeclaration",
                    "paramnames": []
                },
                "shortpath": "Apple.js"
            },
            "description": "<p>Generate the Fibonacci sequence of numbers.</p>",
            "yields": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>The next number in the Fibonacci sequence.</p>"
                }
            ],
            "name": "fibonacci",
            "longname": "fibonacci",
            "kind": "function",
            "scope": "global",
            "params": [],
            "generator": true,
            "attribs": "<span class=\"type-signature\">(generator) </span>",
            "id": "fibonacci",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {number}</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * Asynchronously initializes sql.js\r\n * @function initSqlJs\r\n * @param {SqlJsConfig} config module initialization parameters\r\n * @returns {SqlJs}\r\n * @example\r\n * initSqlJs({\r\n *  locateFile: name => '/path/to/assets/' + name\r\n * }).then(SQL => {\r\n *  const db = new SQL.Database();\r\n *  const result = db.exec(\"select 'hello world'\");\r\n *  console.log(result);\r\n * })\r\n */",
            "meta": {
                "filename": "api.js",
                "lineno": 34,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "description": "<p>Asynchronously initializes sql.js</p>",
            "kind": "function",
            "name": "initSqlJs",
            "params": [
                {
                    "type": {
                        "names": [
                            "SqlJsConfig"
                        ]
                    },
                    "description": "<p>module initialization parameters</p>",
                    "name": "config"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "SqlJs"
                        ]
                    }
                }
            ],
            "examples": [
                {
                    "caption": "",
                    "code": "initSqlJs({\r locateFile: name => '/path/to/assets/' + name\r}).then(SQL => {\r const db = new SQL.Database();\r const result = db.exec(\"select 'hello world'\");\r console.log(result);\r})"
                }
            ],
            "longname": "initSqlJs",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "initSqlJs",
            "signature": "<span class=\"signature\">(config)</span><span class=\"type-signature\"> &rarr; {<a href=\"global.html#SqlJs\">SqlJs</a>}</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * @module SqlJs\r\n */",
            "meta": {
                "filename": "api.js",
                "lineno": 48,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "module",
            "name": "SqlJs",
            "longname": "module:SqlJs",
            "attribs": "",
            "id": "SqlJs",
            "ancestors": []
        },
        {
            "comment": "/** @module bookshelf */",
            "meta": {
                "filename": "Modules.js",
                "lineno": 14,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Modules.js"
            },
            "kind": "module",
            "name": "bookshelf",
            "longname": "module:bookshelf",
            "scope": "inner",
            "memberof": "module:color/mixer",
            "attribs": "",
            "id": "bookshelf",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>~"
            ]
        },
        {
            "comment": "/** @class */",
            "meta": {
                "range": [
                    385,
                    466
                ],
                "filename": "Modules.js",
                "lineno": 16,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003103",
                    "name": "this.Book",
                    "type": "FunctionExpression",
                    "paramnames": [
                        "title"
                    ]
                },
                "vars": {
                    "this.title": "module:bookshelf.Book#title"
                },
                "shortpath": "Modules.js"
            },
            "kind": "class",
            "name": "Book",
            "longname": "module:bookshelf.Book",
            "memberof": "module:bookshelf",
            "scope": "static",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Book",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>",
                "<a href=\"module-bookshelf.html\">~bookshelf</a>."
            ]
        },
        {
            "comment": "/** The title. */",
            "meta": {
                "range": [
                    444,
                    462
                ],
                "filename": "Modules.js",
                "lineno": 18,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003111",
                    "name": "this.title",
                    "type": "Identifier",
                    "value": "title",
                    "paramnames": []
                },
                "shortpath": "Modules.js"
            },
            "description": "<p>The title.</p>",
            "name": "title",
            "longname": "module:bookshelf.Book#title",
            "kind": "member",
            "memberof": "module:bookshelf.Book",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "title",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>",
                "<a href=\"module-bookshelf.html\">~bookshelf</a>",
                "<a href=\"module-bookshelf.Book.html\">.Book</a>#"
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/** @module color/mixer */",
            "meta": {
                "filename": "Modules.js",
                "lineno": 1,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Modules.js"
            },
            "kind": "module",
            "name": "color/mixer",
            "longname": "module:color/mixer",
            "attribs": "",
            "id": "color/mixer",
            "ancestors": []
        },
        {
            "comment": "/** Blend two `colours` together. */",
            "meta": {
                "range": [
                    94,
                    130
                ],
                "filename": "Modules.js",
                "lineno": 4,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003084",
                    "name": "blend",
                    "type": "FunctionExpression"
                },
                "shortpath": "Modules.js"
            },
            "description": "<p>Blend two <code>colours</code> together.</p>",
            "name": "blend",
            "longname": "module:color/mixer.blend",
            "kind": "function",
            "memberof": "module:color/mixer",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".blend",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>."
            ]
        },
        {
            "comment": "/** Darkens a color. */",
            "meta": {
                "range": [
                    295,
                    339
                ],
                "filename": "Modules.js",
                "lineno": 12,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003094",
                    "name": "exports.darken",
                    "type": "FunctionExpression",
                    "paramnames": [
                        "color",
                        "shade"
                    ]
                },
                "shortpath": "Modules.js"
            },
            "description": "<p>Darkens a color.</p>",
            "name": "darken",
            "longname": "module:color/mixer.darken",
            "kind": "function",
            "memberof": "module:color/mixer",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".darken",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>."
            ]
        },
        {
            "comment": "/** Generator example\r\n     * @yields {string} A `string` object, which *may* be empty\r\n     */",
            "meta": {
                "range": [
                    238,
                    262
                ],
                "filename": "Modules.js",
                "lineno": 8,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003089",
                    "name": "fib",
                    "type": "FunctionExpression",
                    "value": "gen"
                },
                "shortpath": "Modules.js"
            },
            "description": "<p>Generator example</p>",
            "yields": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>A <code>string</code> object, which <em>may</em> be empty</p>"
                }
            ],
            "name": "fib",
            "longname": "module:color/mixer.fib",
            "kind": "function",
            "memberof": "module:color/mixer",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".fib",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {string}</span>",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>."
            ]
        },
        {
            "comment": "/**\r\n     * @namespace obj.map\r\n     */",
            "meta": {
                "filename": "NamespaceWithAlias.js",
                "lineno": 2,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "NamespaceWithAlias.js"
            },
            "kind": "namespace",
            "name": "map",
            "memberof": "obj",
            "longname": "obj.map",
            "scope": "static",
            "attribs": "",
            "id": "map",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * This is an alias. It's original name is start9\r\n     * @memberOf obj.map\r\n     * @function\r\n     * @alias obj.map.aliasOfStart9\r\n     */",
            "meta": {
                "range": [
                    408,
                    435
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 19,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003136",
                    "name": "map.start9",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>This is an alias. It's original name is start9</p>",
            "memberof": "obj.map",
            "kind": "function",
            "alias": "obj.map.aliasOfStart9",
            "name": "aliasOfStart9",
            "longname": "obj.map.aliasOfStart9",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".aliasOfStart9",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    222,
                    248
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 12,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003129",
                    "name": "map.start",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start",
            "longname": "obj.map.map.start",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1641,
                    1668
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 73,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003199",
                    "name": "map.start0",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start0",
            "longname": "obj.map.map.start0",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start0",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    545,
                    572
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 25,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003143",
                    "name": "map.start1",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start1",
            "longname": "obj.map.map.start1",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start1",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    682,
                    709
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 31,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003150",
                    "name": "map.start2",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start2",
            "longname": "obj.map.map.start2",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start2",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    819,
                    846
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 37,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003157",
                    "name": "map.start3",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start3",
            "longname": "obj.map.map.start3",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start3",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    956,
                    983
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 43,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003164",
                    "name": "map.start4",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start4",
            "longname": "obj.map.map.start4",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start4",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1093,
                    1120
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 49,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003171",
                    "name": "map.start5",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start5",
            "longname": "obj.map.map.start5",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start5",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1230,
                    1257
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 55,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003178",
                    "name": "map.start6",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start6",
            "longname": "obj.map.map.start6",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start6",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1367,
                    1394
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 61,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003185",
                    "name": "map.start7",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start7",
            "longname": "obj.map.map.start7",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start7",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1504,
                    1531
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 67,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003192",
                    "name": "map.start8",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start8",
            "longname": "obj.map.map.start8",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start8",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Alive.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\api.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Apple.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\assets\\script.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Energy.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Environment.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\HideConstructor.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Modules.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\NamespaceWithAlias.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Tree.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\World.js"
            ],
            "attribs": "",
            "id": "package:",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * Options for ordering a delicious slice of pie.\r\n * @namespace\r\n */",
            "meta": {
                "range": [
                    2337,
                    2673
                ],
                "filename": "Alive.js",
                "lineno": 89,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000041",
                    "name": "pieOptions",
                    "type": "ObjectExpression",
                    "value": "{\"plain\":\"pie\",\"aLaMode\":\"\",\"aNamespaceFunction\":\"\"}"
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>Options for ordering a delicious slice of pie.</p>",
            "kind": "namespace",
            "name": "pieOptions",
            "longname": "pieOptions",
            "scope": "global",
            "params": [],
            "attribs": "",
            "id": "pieOptions",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * A la mode.\r\n     * @readonly\r\n     */",
            "meta": {
                "range": [
                    2464,
                    2534
                ],
                "filename": "Alive.js",
                "lineno": 98,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000046",
                    "name": "aLaMode",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>A la mode.</p>",
            "readonly": true,
            "name": "aLaMode",
            "longname": "pieOptions.aLaMode",
            "kind": "member",
            "memberof": "pieOptions",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static, readonly) </span>",
            "id": ".aLaMode",
            "ancestors": [
                "<a href=\"pieOptions.html\">pieOptions</a>."
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n     * This is just a namespace functions.\r\n     * @param {number} args \r\n     */",
            "meta": {
                "range": [
                    2635,
                    2670
                ],
                "filename": "Alive.js",
                "lineno": 106,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000055",
                    "name": "aNamespaceFunction",
                    "type": "FunctionExpression"
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>This is just a namespace functions.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "name": "args"
                }
            ],
            "name": "aNamespaceFunction",
            "longname": "pieOptions.aNamespaceFunction",
            "kind": "function",
            "memberof": "pieOptions",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".aNamespaceFunction",
            "signature": "<span class=\"signature\">(args)</span>",
            "ancestors": [
                "<a href=\"pieOptions.html\">pieOptions</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Plain.\r\n     */",
            "meta": {
                "range": [
                    2390,
                    2402
                ],
                "filename": "Alive.js",
                "lineno": 93,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000044",
                    "name": "plain",
                    "type": "Literal",
                    "value": "pie"
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>Plain.</p>",
            "name": "plain",
            "longname": "pieOptions.plain",
            "kind": "member",
            "memberof": "pieOptions",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".plain",
            "ancestors": [
                "<a href=\"pieOptions.html\">pieOptions</a>."
            ],
            "signature": "<span class=\"type-signature\"></span>"
        }
    ],
    "_selectedIndexes": [
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        22,
        23,
        24,
        25,
        26,
        27,
        28,
        29,
        30,
        31,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94
    ],
    "_selectedItems": [
        {
            "comment": "/**\r\n * @summary\r\n * This is a short summary of the `Alive` class. These texts are just acting\r\n * as filler texts for summary.\r\n * \r\n * @class\r\n */",
            "meta": {
                "range": [
                    864,
                    2253
                ],
                "filename": "Alive.js",
                "lineno": 23,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000002",
                    "name": "Alive",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "name": "Alive",
            "longname": "Alive",
            "kind": "class",
            "summary": "<p>This is a short summary of the <code>Alive</code> class. These texts are just acting\nas filler texts for summary.</p>",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Alive",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * A constant.\r\n     * @readonly\r\n     * @deprecated This is no longer used\r\n     */",
            "meta": {
                "range": [
                    1576,
                    1584
                ],
                "filename": "Alive.js",
                "lineno": 56,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000025",
                    "name": "FOO",
                    "type": "ClassProperty"
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>A constant.</p>",
            "readonly": true,
            "deprecated": "This is no longer used",
            "name": "FOO",
            "longname": "Alive#FOO",
            "kind": "member",
            "memberof": "Alive",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\">(readonly) </span>",
            "id": "FOO",
            "ancestors": [
                "<a href=\"Alive.html\">Alive</a>#"
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n         * This is a number array.\r\n         * @constant\r\n         * @type Object\r\n         * @default\r\n         */",
            "meta": {
                "range": [
                    1373,
                    1464
                ],
                "filename": "Alive.js",
                "lineno": 46,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000016",
                    "name": "this.NUMBER_ARRAY",
                    "type": "ObjectExpression",
                    "value": "{\"google\":\"Google\",\"games\":\"Games\"}",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>This is a number array.</p>",
            "kind": "member",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "defaultvalue": "<pre class='prettyprint'><code class='nohljsln compact'>{\"google\":\"Google\",\"games\":\"Games\"}</code></pre>",
            "defaultvaluetype": "object",
            "name": "NUMBER_ARRAY",
            "longname": "Alive#NUMBER_ARRAY",
            "memberof": "Alive",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\">(constant) </span>",
            "id": "NUMBER_ARRAY",
            "ancestors": [
                "<a href=\"Alive.html\">Alive</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Object</span>"
        },
        {
            "comment": "/**\r\n     * Text\r\n     * > Text\r\n     * \r\n     * \r\n     *```js\r\n     * code\r\n     *```\r\n     *\r\n     * \r\n     * > Note that commands are not matched in captions or in the middle of the text.\r\n     */",
            "meta": {
                "range": [
                    2208,
                    2250
                ],
                "filename": "Alive.js",
                "lineno": 80,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000034",
                    "name": "Alive#gameQuery",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>Text</p>\n<blockquote>\n<p>Text</p>\n</blockquote>\n<pre class=\"prettyprint source lang-js\"><code>code\n</code></pre>\n<blockquote>\n<p>Note that commands are not matched in captions or in the middle of the text.</p>\n</blockquote>",
            "name": "gameQuery",
            "longname": "Alive#gameQuery",
            "kind": "function",
            "memberof": "Alive",
            "scope": "instance",
            "params": [],
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "gameQuery",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Alive.html\">Alive</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @param {array<object|function|array|number|string|undefined|null|Symbol|boolean|Energy>} life This is an array of many things.\r\n     * @return {Energy} the energy wasted in this surviving instance\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu\r\n     * @method\r\n     * @deprecated\r\n     */",
            "meta": {
                "range": [
                    1953,
                    1997
                ],
                "filename": "Alive.js",
                "lineno": 65,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000027",
                    "name": "Alive#survive",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "life"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "params": [
                {
                    "type": {
                        "names": [
                            "array.<(object|function()|array|number|string|undefined|null|Symbol|boolean|Energy)>"
                        ]
                    },
                    "description": "<p>This is an array of many things.</p>",
                    "name": "life"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    },
                    "description": "<p>the energy wasted in this surviving instance</p>"
                }
            ],
            "tags": [
                {
                    "originalTitle": "link",
                    "title": "link",
                    "text": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu",
                    "value": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu"
                }
            ],
            "kind": "function",
            "deprecated": true,
            "name": "survive",
            "longname": "Alive#survive",
            "memberof": "Alive",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "survive",
            "signature": "<span class=\"signature\">(life)</span><span class=\"type-signature\"> &rarr; {<a href=\"Energy.html\">Energy</a>}</span>",
            "ancestors": [
                "<a href=\"Alive.html\">Alive</a>#"
            ]
        },
        {
            "comment": "/**\r\n         * @summary\r\n         * amount of energy\r\n         * @property {Energy}\r\n         * @defaultvalue null\r\n         * \r\n         * @example\r\n         * world = this.world\r\n         * function test() {\r\n         *  return world\r\n         * }\r\n         * @alias AliveEnergy\r\n         */",
            "meta": {
                "range": [
                    1214,
                    1232
                ],
                "filename": "Alive.js",
                "lineno": 39,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000010",
                    "name": "this.energy",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "summary": "<p>amount of energy</p>",
            "properties": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    }
                }
            ],
            "defaultvalue": "null",
            "examples": [
                {
                    "caption": "",
                    "code": "world = this.world\rfunction test() {\r return world\r}"
                }
            ],
            "alias": "AliveEnergy",
            "name": "AliveEnergy",
            "longname": "AliveEnergy",
            "kind": "member",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "AliveEnergy",
            "ancestors": [],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n * Donec imperdiet dignissim semper. Sed vehicula purus dui, eget porta lectus convallis sagittis. Suspendisse ac lectus dignissim, tincidunt nisi quis, gravida metus.\r\n * @class\r\n * @extends Alive\r\n */",
            "meta": {
                "range": [
                    209,
                    574
                ],
                "filename": "Apple.js",
                "lineno": 6,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002976",
                    "name": "Apple",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Apple.js"
            },
            "name": "Apple",
            "longname": "Apple",
            "kind": "class",
            "classdesc": "<p>Donec imperdiet dignissim semper. Sed vehicula purus dui, eget porta lectus convallis sagittis. Suspendisse ac lectus dignissim, tincidunt nisi quis, gravida metus.</p>",
            "augments": [
                "Alive"
            ],
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Apple",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * A constant.\r\n     * @readonly\r\n     * @deprecated This is no longer used\r\n     */",
            "meta": {
                "range": [
                    1576,
                    1584
                ],
                "filename": "Alive.js",
                "lineno": 56,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000025",
                    "name": "FOO",
                    "type": "ClassProperty"
                },
                "shortpath": "Alive.js"
            },
            "name": "FOO",
            "longname": "Apple#FOO",
            "kind": "member",
            "description": "<p>A constant.</p>",
            "readonly": true,
            "deprecated": "This is no longer used",
            "memberof": "Apple",
            "scope": "instance",
            "inherits": "Alive#FOO",
            "inherited": true,
            "overrides": "Alive#FOO",
            "attribs": "<span class=\"type-signature\">(readonly) </span>",
            "id": "FOO",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n         * This is a number array.\r\n         * @constant\r\n         * @type Object\r\n         * @default\r\n         */",
            "meta": {
                "range": [
                    1373,
                    1464
                ],
                "filename": "Alive.js",
                "lineno": 46,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000016",
                    "name": "this.NUMBER_ARRAY",
                    "type": "ObjectExpression",
                    "value": "{\"google\":\"Google\",\"games\":\"Games\"}",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "name": "NUMBER_ARRAY",
            "longname": "Apple#NUMBER_ARRAY",
            "kind": "member",
            "description": "<p>This is a number array.</p>",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "defaultvalue": "<pre class='prettyprint'><code class='nohljsln compact'>{\"google\":\"Google\",\"games\":\"Games\"}</code></pre>",
            "defaultvaluetype": "object",
            "memberof": "Apple",
            "scope": "instance",
            "inherits": "Alive#NUMBER_ARRAY",
            "inherited": true,
            "overrides": "Alive#NUMBER_ARRAY",
            "attribs": "<span class=\"type-signature\">(constant) </span>",
            "id": "NUMBER_ARRAY",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Object</span>"
        },
        {
            "comment": "/**\r\n         * Donec imperdiet dignissim\r\n         * @type {String}\r\n         */",
            "meta": {
                "range": [
                    376,
                    393
                ],
                "filename": "Apple.js",
                "lineno": 13,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002988",
                    "name": "this.color",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Apple.js"
            },
            "description": "<p>Donec imperdiet dignissim</p>",
            "type": {
                "names": [
                    "String"
                ]
            },
            "name": "color",
            "longname": "Apple#color",
            "kind": "member",
            "memberof": "Apple",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "color",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :String</span>"
        },
        {
            "comment": "/**\r\n * Sed vehicula purus dui\r\n * @event Apple#beEaten\r\n * @type {Energy}\r\n */",
            "meta": {
                "filename": "Apple.js",
                "lineno": 27,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Apple.js"
            },
            "description": "<p>Sed vehicula purus dui</p>",
            "kind": "event",
            "name": "beEaten",
            "type": {
                "names": [
                    "Energy"
                ]
            },
            "memberof": "Apple",
            "longname": "Apple#event:beEaten",
            "scope": "instance",
            "attribs": "",
            "id": "event:beEaten",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * Generate the Fibonacci sequence of numbers.\r\n     *\r\n     * @yields {number} The next number in the Fibonacci sequence.\r\n     */",
            "meta": {
                "range": [
                    557,
                    567
                ],
                "filename": "Apple.js",
                "lineno": 22,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002993",
                    "name": "Apple#fib",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Apple.js"
            },
            "description": "<p>Generate the Fibonacci sequence of numbers.</p>",
            "yields": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>The next number in the Fibonacci sequence.</p>"
                }
            ],
            "name": "fib",
            "longname": "Apple#fib",
            "kind": "function",
            "memberof": "Apple",
            "scope": "instance",
            "params": [],
            "generator": true,
            "attribs": "<span class=\"type-signature\">(generator) </span>",
            "id": "fib",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {number}</span>",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * Text\r\n     * > Text\r\n     * \r\n     * \r\n     *```js\r\n     * code\r\n     *```\r\n     *\r\n     * \r\n     * > Note that commands are not matched in captions or in the middle of the text.\r\n     */",
            "meta": {
                "range": [
                    2208,
                    2250
                ],
                "filename": "Alive.js",
                "lineno": 80,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000034",
                    "name": "Alive#gameQuery",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "name": "gameQuery",
            "longname": "Apple#gameQuery",
            "kind": "function",
            "description": "<p>Text</p>\n<blockquote>\n<p>Text</p>\n</blockquote>\n<pre class=\"prettyprint source lang-js\"><code>code\n</code></pre>\n<blockquote>\n<p>Note that commands are not matched in captions or in the middle of the text.</p>\n</blockquote>",
            "memberof": "Apple",
            "scope": "instance",
            "inherits": "Alive#gameQuery",
            "inherited": true,
            "overrides": "Alive#gameQuery",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "gameQuery",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @param {array<object|function|array|number|string|undefined|null|Symbol|boolean|Energy>} life This is an array of many things.\r\n     * @return {Energy} the energy wasted in this surviving instance\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu\r\n     * @method\r\n     * @deprecated\r\n     */",
            "meta": {
                "range": [
                    1953,
                    1997
                ],
                "filename": "Alive.js",
                "lineno": 65,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000027",
                    "name": "Alive#survive",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "life"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "name": "survive",
            "longname": "Apple#survive",
            "kind": "function",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    },
                    "description": "<p>the energy wasted in this surviving instance</p>"
                }
            ],
            "tags": [
                {
                    "originalTitle": "link",
                    "title": "link",
                    "text": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu",
                    "value": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu"
                }
            ],
            "deprecated": true,
            "memberof": "Apple",
            "scope": "instance",
            "params": [
                {
                    "type": {
                        "names": [
                            "array.<(object|function()|array|number|string|undefined|null|Symbol|boolean|Energy)>"
                        ]
                    },
                    "description": "<p>This is an array of many things.</p>",
                    "name": "life"
                }
            ],
            "inherits": "Alive#survive",
            "inherited": true,
            "overrides": "Alive#survive",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "survive",
            "signature": "<span class=\"signature\">(life)</span><span class=\"type-signature\"> &rarr; {<a href=\"Energy.html\">Energy</a>}</span>",
            "ancestors": [
                "<a href=\"Apple.html\">Apple</a>#"
            ]
        },
        {
            "comment": "/** @classdesc\r\n    * Represents an SQLite database\r\n    * @constructs Database\r\n    * @memberof module:SqlJs\r\n    * Open a new database either by creating a new one or opening an existing\r\n    * one stored in the byte array passed in first argument\r\n    * @param {number[]} data An array of bytes representing\r\n    * an SQLite database file\r\n    */",
            "meta": {
                "range": [
                    25294,
                    25890
                ],
                "filename": "api.js",
                "lineno": 739,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001928",
                    "name": "Database",
                    "type": "FunctionDeclaration",
                    "paramnames": [
                        "data"
                    ]
                },
                "vars": {
                    "this.filename": "Database#filename",
                    "this.db": "Database#db",
                    "this.statements": "Database#statements",
                    "this.functions": "Database#functions"
                },
                "shortpath": "api.js"
            },
            "classdesc": "<p>Represents an SQLite database</p>",
            "alias": "Database",
            "kind": "class",
            "memberof": "module:SqlJs\rOpen a new database either by creating a new one or opening an existing\rone stored in the byte array passed in first argument",
            "params": [
                {
                    "type": {
                        "names": [
                            "Array.<number>"
                        ]
                    },
                    "description": "<p>An array of bytes representing\nan SQLite database file</p>",
                    "name": "data"
                }
            ],
            "name": "Database",
            "longname": "Database",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Database",
            "signature": "<span class=\"signature\">(data)</span>",
            "ancestors": []
        },
        {
            "comment": "/** Close the database, and all associated prepared statements.\r\n    * The memory associated to the database and all associated statements\r\n    * will be freed.\r\n    *\r\n    * **Warning**: A statement belonging to a database that has been closed\r\n    * cannot be used anymore.\r\n    *\r\n    * Databases **must** be closed when you're finished with them, or the\r\n    * memory consumption will grow forever\r\n     */",
            "meta": {
                "range": [
                    35951,
                    36452
                ],
                "filename": "api.js",
                "lineno": 1001,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002509",
                    "name": "Database.prototype[\"close\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "close",
                    "paramnames": []
                },
                "vars": {
                    "": null,
                    "this.functions": "Database#functions",
                    "this.db": "Database#db"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Close the database, and all associated prepared statements.\nThe memory associated to the database and all associated statements\nwill be freed.</p>\n<p><strong>Warning</strong>: A statement belonging to a database that has been closed\ncannot be used anymore.</p>\n<p>Databases <strong>must</strong> be closed when you're finished with them, or the\nmemory consumption will grow forever</p>",
            "name": "[\"close\"]",
            "longname": "Database#[\"close\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22close%22%5D",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Register a custom `function` with SQLite\r\n    @example <caption>Register a simple function</caption>\r\n        db.create_function(\"addOne\", function (x) {return x+1;})\r\n        db.exec(\"SELECT addOne(1)\") // = 2\r\n    @param {string} name the name of the function as referenced in\r\n    SQL statements.\r\n    @param {function} func the actual function to be executed.\r\n    @return {Database} The database `object`. Useful for method chaining\r\n     */",
            "meta": {
                "range": [
                    37767,
                    41137
                ],
                "filename": "api.js",
                "lineno": 1045,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002640",
                    "name": "Database.prototype[\"create_function\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "create_function",
                    "paramnames": [
                        "name",
                        "func"
                    ]
                },
                "vars": {
                    "wrapped_func": "Database#\"create_function\"~wrapped_func",
                    "func_ptr": "Database#\"create_function\"~func_ptr",
                    "this.functions[undefined]": "Database#functions[undefined]"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Register a custom <code>function</code> with SQLite</p>",
            "examples": [
                {
                    "caption": "Register a simple function",
                    "code": "        db.create_function(\"addOne\", function (x) {return x+1;})\r\n        db.exec(\"SELECT addOne(1)\") // = 2\r\n    "
                }
            ],
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>the name of the function as referenced in\nSQL statements.</p>",
                    "name": "name"
                },
                {
                    "type": {
                        "names": [
                            "function"
                        ]
                    },
                    "description": "<p>the actual function to be executed.</p>",
                    "name": "func"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database <code>object</code>. Useful for method chaining</p>"
                }
            ],
            "name": "[\"create_function\"]",
            "longname": "Database#[\"create_function\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22create_function%22%5D",
            "signature": "<span class=\"signature\">(name, func)</span><span class=\"type-signature\"> &rarr; {<a href=\"Database.html\">Database</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Execute a sql statement, and call a callback for each row of result.\r\n    Currently, this method is synchronous, it will not return until the callback\r\n    has been called on every row of the result. But this might change.\r\n    @param {string} sql A string of SQL text. Can contain placeholders\r\n    that will be bound to the parameters given as the second argument\r\n    @param {Statement.BindParams} [params=[]] Parameters to bind to the query\r\n    @param {function(Object<string, Database.SqlValue>):void} callback\r\n    Function to call on each row of result\r\n    @param {function():void} done A function that will be called when\r\n    all rows have been retrieved\r\n    @return {Database} The database object. Useful for method chaining\r\n    @example <caption>Read values from a table</caption>\r\n    db.each(\"SELECT name,age FROM users WHERE age >= $majority\", {$majority:18},\r\n            function (row){console.log(row.name + \" is a grown-up.\")}\r\n    );\r\n     */",
            "meta": {
                "range": [
                    32370,
                    32954
                ],
                "filename": "api.js",
                "lineno": 915,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002249",
                    "name": "Database.prototype[\"each\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "each",
                    "paramnames": [
                        "sql",
                        "params",
                        "callback",
                        "done"
                    ]
                },
                "vars": {
                    "stmt": "module:SqlJs~stmt",
                    "done": "module:SqlJs~done",
                    "callback": "module:SqlJs~callback",
                    "params": "module:SqlJs~params"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Execute a sql statement, and call a callback for each row of result.\nCurrently, this method is synchronous, it will not return until the callback\nhas been called on every row of the result. But this might change.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>A string of SQL text. Can contain placeholders\nthat will be bound to the parameters given as the second argument</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": "[]",
                    "description": "<p>Parameters to bind to the query</p>",
                    "name": "params"
                },
                {
                    "type": {
                        "names": [
                            "function"
                        ]
                    },
                    "description": "<p>Function to call on each row of result</p>",
                    "name": "callback"
                },
                {
                    "type": {
                        "names": [
                            "function"
                        ]
                    },
                    "description": "<p>A function that will be called when\nall rows have been retrieved</p>",
                    "name": "done"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database object. Useful for method chaining</p>"
                }
            ],
            "examples": [
                {
                    "caption": "Read values from a table",
                    "code": "    db.each(\"SELECT name,age FROM users WHERE age >= $majority\", {$majority:18},\r\n            function (row){console.log(row.name + \" is a grown-up.\")}\r\n    );"
                }
            ],
            "name": "[\"each\"]",
            "longname": "Database#[\"each\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22each%22%5D",
            "signature": "<span class=\"signature\">(sql, params<span class=\"signature-attributes\">opt</span>, callback, done)</span><span class=\"type-signature\"> &rarr; {<a href=\"Database.html\">Database</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Execute an SQL query, and returns the result.\r\n    *\r\n    * This is a wrapper against\r\n    * {@link Database.prepare},\r\n    * {@link Statement.bind},\r\n    * {@link Statement.step},\r\n    * {@link Statement.get},\r\n    * and {@link Statement.free}.\r\n    *\r\n    * The result is an array of result elements. There are as many result\r\n    * elements as the number of statements in your sql string (statements are\r\n    * separated by a semicolon)\r\n    *\r\n    * ## Example use\r\n    * We will create the following table, named *test* and query it with a\r\n    * multi-line statement using params:\r\n    *\r\n    * | id | age |  name  |\r\n    * |:--:|:---:|:------:|\r\n    * | 1  |  1  | Ling   |\r\n    * | 2  |  18 | Paul   |\r\n    *\r\n    * We query it like that:\r\n    * ```javascript\r\n    * var db = new SQL.Database();\r\n    * var res = db.exec(\r\n    *     \"DROP TABLE IF EXISTS test;\\n\"\r\n    *     + \"CREATE TABLE test (id INTEGER, age INTEGER, name TEXT);\"\r\n    *     + \"INSERT INTO test VALUES ($id1, :age1, @name1);\"\r\n    *     + \"INSERT INTO test VALUES ($id2, :age2, @name2);\"\r\n    *     + \"SELECT id FROM test;\"\r\n    *     + \"SELECT age,name FROM test WHERE id=$id1\",\r\n    *     {\r\n    *         \"$id1\": 1, \":age1\": 1, \"@name1\": \"Ling\",\r\n    *         \"$id2\": 2, \":age2\": 18, \"@name2\": \"Paul\"\r\n    *     }\r\n    * );\r\n    * ```\r\n    *\r\n    * `res` is now :\r\n    * ```javascript\r\n    *     [\r\n    *         {\"columns\":[\"id\"],\"values\":[[1],[2]]},\r\n    *         {\"columns\":[\"age\",\"name\"],\"values\":[[1,\"Ling\"]]}\r\n    *     ]\r\n    * ```\r\n    *\r\n    @param {string} sql a string containing some SQL text to execute\r\n    @param {Statement.BindParams} [params] When the SQL statement contains\r\n    placeholders, you can pass them in here. They will be bound to the statement\r\n    before it is executed. If you use the params argument as an array,\r\n    you **cannot** provide an sql string that contains several statements\r\n    (separated by `;`). This limitation does not apply to params as an object.\r\n    * @return {Database.QueryExecResult[]} The results of each statement\r\n    */",
            "meta": {
                "range": [
                    29502,
                    31388
                ],
                "filename": "api.js",
                "lineno": 848,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002065",
                    "name": "Database.prototype[\"exec\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "exec",
                    "paramnames": [
                        "sql",
                        "params"
                    ]
                },
                "vars": {
                    "stack": "Database#\"exec\"~stack",
                    "stmt": "module:SqlJs~stmt",
                    "nextSqlPtr": "module:SqlJs~nextSqlPtr",
                    "pzTail": "Database#\"exec\"~pzTail",
                    "results": "Database#\"exec\"~results",
                    "pStmt": "Database#\"exec\"~pStmt",
                    "curresult": "module:SqlJs~curresult"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Execute an SQL query, and returns the result.</p>\n<p>This is a wrapper against\n{@link Database.prepare},\n{@link Statement.bind},\n{@link Statement.step},\n{@link Statement.get},\nand {@link Statement.free}.</p>\n<p>The result is an array of result elements. There are as many result\nelements as the number of statements in your sql string (statements are\nseparated by a semicolon)</p>\n<h2 id=\"example-use\">Example use</h2>\n<p>We will create the following table, named <em>test</em> and query it with a\nmulti-line statement using params:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">id</th>\n<th style=\"text-align:center\">age</th>\n<th style=\"text-align:center\">name</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Ling</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">18</td>\n<td style=\"text-align:center\">Paul</td>\n</tr>\n</tbody>\n</table>\n<p>We query it like that:</p>\n<pre class=\"prettyprint source lang-javascript\"><code>var db = new SQL.Database();\nvar res = db.exec(\n    &quot;DROP TABLE IF EXISTS test;\\n&quot;\n    + &quot;CREATE TABLE test (id INTEGER, age INTEGER, name TEXT);&quot;\n    + &quot;INSERT INTO test VALUES ($id1, :age1, @name1);&quot;\n    + &quot;INSERT INTO test VALUES ($id2, :age2, @name2);&quot;\n    + &quot;SELECT id FROM test;&quot;\n    + &quot;SELECT age,name FROM test WHERE id=$id1&quot;,\n    {\n        &quot;$id1&quot;: 1, &quot;:age1&quot;: 1, &quot;@name1&quot;: &quot;Ling&quot;,\n        &quot;$id2&quot;: 2, &quot;:age2&quot;: 18, &quot;@name2&quot;: &quot;Paul&quot;\n    }\n);\n</code></pre>\n<p><code>res</code> is now :</p>\n<pre class=\"prettyprint source lang-javascript\"><code>    [\n        {&quot;columns&quot;:[&quot;id&quot;],&quot;values&quot;:[[1],[2]]},\n        {&quot;columns&quot;:[&quot;age&quot;,&quot;name&quot;],&quot;values&quot;:[[1,&quot;Ling&quot;]]}\n    ]\n</code></pre>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>a string containing some SQL text to execute</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>When the SQL statement contains\nplaceholders, you can pass them in here. They will be bound to the statement\nbefore it is executed. If you use the params argument as an array,\nyou <strong>cannot</strong> provide an sql string that contains several statements\n(separated by <code>;</code>). This limitation does not apply to params as an object.</p>",
                    "name": "params"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Array.<Database.QueryExecResult>"
                        ]
                    },
                    "description": "<p>The results of each statement</p>"
                }
            ],
            "name": "[\"exec\"]",
            "longname": "Database#[\"exec\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22exec%22%5D",
            "signature": "<span class=\"signature\">(sql, params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {Array.&lt;<a href=\"Database.html#.QueryExecResult\">Database.QueryExecResult</a>>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Exports the contents of the database to a binary array\r\n    @return {Uint8Array} An array of bytes of the SQLite3 database file\r\n     */",
            "meta": {
                "range": [
                    34991,
                    35528
                ],
                "filename": "api.js",
                "lineno": 979,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002416",
                    "name": "Database.prototype[\"export\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "exportDatabase",
                    "paramnames": []
                },
                "vars": {
                    "": null,
                    "this.functions": "Database#functions",
                    "binaryDb": "Database#\"export\"~binaryDb",
                    "this.db": "Database#db"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Exports the contents of the database to a binary array</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Uint8Array"
                        ]
                    },
                    "description": "<p>An array of bytes of the SQLite3 database file</p>"
                }
            ],
            "name": "[\"export\"]",
            "longname": "Database#[\"export\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22export%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {Uint8Array}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Returns the number of changed rows (modified, inserted or deleted)\r\n    by the latest completed INSERT, UPDATE or DELETE statement on the\r\n    database. Executing any other type of SQL statement does not modify\r\n    the value returned by this function.\r\n    @return {number} the number of rows modified\r\n    */",
            "meta": {
                "range": [
                    37187,
                    37304
                ],
                "filename": "api.js",
                "lineno": 1033,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002624",
                    "name": "Database.prototype[\"getRowsModified\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getRowsModified",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Returns the number of changed rows (modified, inserted or deleted)\nby the latest completed INSERT, UPDATE or DELETE statement on the\ndatabase. Executing any other type of SQL statement does not modify\nthe value returned by this function.</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>the number of rows modified</p>"
                }
            ],
            "name": "[\"getRowsModified\"]",
            "longname": "Database#[\"getRowsModified\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getRowsModified%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {number}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Analyze a result code, return null if no error occurred, and throw\r\n    an error with a descriptive message otherwise\r\n    @nodoc\r\n     */",
            "meta": {
                "range": [
                    36607,
                    36860
                ],
                "filename": "api.js",
                "lineno": 1019,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002591",
                    "name": "Database.prototype[\"handleError\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "handleError",
                    "paramnames": [
                        "returnCode"
                    ]
                },
                "vars": {
                    "errmsg": "module:SqlJs~errmsg"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Analyze a result code, return null if no error occurred, and throw\nan error with a descriptive message otherwise</p>",
            "tags": [
                {
                    "originalTitle": "nodoc",
                    "title": "nodoc",
                    "text": ""
                }
            ],
            "name": "[\"handleError\"]",
            "longname": "Database#[\"handleError\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22handleError%22%5D",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Iterate over multiple SQL statements in a SQL string.\r\n     * This function returns an iterator over {@link Statement} objects.\r\n     * You can use a for...of loop to execute the returned statements one by one.\r\n     * @param {string} sql a string of SQL that can contain multiple statements\r\n     * @return {StatementIterator} the resulting statement iterator\r\n     * @example <caption>Get the results of multiple SQL queries</caption>\r\n     * const sql_queries = \"SELECT 1 AS x; SELECT '2' as y\";\r\n     * for (const statement of db.iterateStatements(sql_queries)) {\r\n     *     const sql = statement.getSQL(); // Get the SQL source\r\n     *     const result = statement.getAsObject({}); // Get the row of data\r\n     *     console.log(sql, result);\r\n     * }\r\n     * // This will print:\r\n     * // 'SELECT 1 AS x;' { x: 1 }\r\n     * // \" SELECT '2' as y\" { y: '2' }\r\n     */",
            "meta": {
                "range": [
                    34706,
                    34838
                ],
                "filename": "api.js",
                "lineno": 973,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002400",
                    "name": "Database.prototype[\"iterateStatements\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "iterateStatements",
                    "paramnames": [
                        "sql"
                    ]
                },
                "shortpath": "api.js"
            },
            "description": "<p>Iterate over multiple SQL statements in a SQL string.\nThis function returns an iterator over {@link Statement} objects.\nYou can use a for...of loop to execute the returned statements one by one.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>a string of SQL that can contain multiple statements</p>",
                    "name": "sql"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "StatementIterator"
                        ]
                    },
                    "description": "<p>the resulting statement iterator</p>"
                }
            ],
            "examples": [
                {
                    "caption": "Get the results of multiple SQL queries",
                    "code": "const sql_queries = \"SELECT 1 AS x; SELECT '2' as y\";\rfor (const statement of db.iterateStatements(sql_queries)) {\r    const sql = statement.getSQL(); // Get the SQL source\r    const result = statement.getAsObject({}); // Get the row of data\r    console.log(sql, result);\r}\r// This will print:\r// 'SELECT 1 AS x;' { x: 1 }\r// \" SELECT '2' as y\" { y: '2' }"
                }
            ],
            "name": "[\"iterateStatements\"]",
            "longname": "Database#[\"iterateStatements\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22iterateStatements%22%5D",
            "signature": "<span class=\"signature\">(sql)</span><span class=\"type-signature\"> &rarr; {<a href=\"StatementIterator.html\">StatementIterator</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Prepare an SQL statement\r\n    @param {string} sql a string of SQL, that can contain placeholders\r\n    (`?`, `:VVV`, `:AAA`, `@AAA`)\r\n    @param {Statement.BindParams} [params] values to bind to placeholders\r\n    @return {Statement} the resulting statement\r\n    @throws {String} SQLite error\r\n     */",
            "meta": {
                "range": [
                    33270,
                    33816
                ],
                "filename": "api.js",
                "lineno": 942,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002325",
                    "name": "Database.prototype[\"prepare\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "prepare",
                    "paramnames": [
                        "sql",
                        "params"
                    ]
                },
                "vars": {
                    "pStmt": "Database#\"prepare\"~pStmt",
                    "stmt": "Database#\"prepare\"~stmt",
                    "this.statements[undefined]": "Database#statements[undefined]"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Prepare an SQL statement</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>a string of SQL, that can contain placeholders\n(<code>?</code>, <code>:VVV</code>, <code>:AAA</code>, <code>@AAA</code>)</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>values to bind to placeholders</p>",
                    "name": "params"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Statement"
                        ]
                    },
                    "description": "<p>the resulting statement</p>"
                }
            ],
            "exceptions": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>SQLite error</p>"
                }
            ],
            "name": "[\"prepare\"]",
            "longname": "Database#[\"prepare\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22prepare%22%5D",
            "signature": "<span class=\"signature\">(sql, params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {<a href=\"Statement.html\">Statement</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/** Execute an SQL query, ignoring the rows it returns.\r\n    @param {string} sql a string containing some SQL text to execute\r\n    @param {Statement.BindParams} [params] When the SQL statement contains\r\n    placeholders, you can pass them in here. They will be bound to the statement\r\n    before it is executed. If you use the params argument, you **cannot**\r\n    provide an sql string that contains several statements (separated by `;`)\r\n    @example\r\n    // Insert values in a table\r\n    db.run(\r\n        \"INSERT INTO test VALUES (:age, :name)\",\r\n        { ':age' : 18, ':name' : 'John' }\r\n    );\r\n    @return {Database} The database object (useful for method chaining)\r\n     */",
            "meta": {
                "range": [
                    26582,
                    27045
                ],
                "filename": "api.js",
                "lineno": 767,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002003",
                    "name": "Database.prototype[\"run\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "run",
                    "paramnames": [
                        "sql",
                        "params"
                    ]
                },
                "vars": {
                    "stmt": "Database#\"run\"~stmt"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Execute an SQL query, ignoring the rows it returns.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>a string containing some SQL text to execute</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>When the SQL statement contains\nplaceholders, you can pass them in here. They will be bound to the statement\nbefore it is executed. If you use the params argument, you <strong>cannot</strong>\nprovide an sql string that contains several statements (separated by <code>;</code>)</p>",
                    "name": "params"
                }
            ],
            "examples": [
                {
                    "caption": "",
                    "code": "// Insert values in a table\r\n    db.run(\r\n        \"INSERT INTO test VALUES (:age, :name)\",\r\n        { ':age' : 18, ':name' : 'John' }\r\n    );\r\n    "
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database object (useful for method chaining)</p>"
                }
            ],
            "name": "[\"run\"]",
            "longname": "Database#[\"run\"]",
            "kind": "function",
            "memberof": "Database",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22run%22%5D",
            "signature": "<span class=\"signature\">(sql, params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {<a href=\"Database.html\">Database</a>}</span>",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @typedef {{\r\n        columns:string[],\r\n        values:Database.SqlValue[][]\r\n    }} Database.QueryExecResult\r\n     * @property {string[]} columns the name of the columns of the result\r\n     * (as returned by {@link Statement.getColumnNames})\r\n     * @property {Database.SqlValue[][]} values one array per row, containing\r\n     * the column values\r\n     */",
            "meta": {
                "filename": "api.js",
                "lineno": 783,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "QueryExecResult",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    },
                    "description": "<p>the name of the columns of the result\n(as returned by {@link Statement.getColumnNames})</p>",
                    "name": "columns"
                },
                {
                    "type": {
                        "names": [
                            "Array.<Array.<Database.SqlValue>>"
                        ]
                    },
                    "description": "<p>one array per row, containing\nthe column values</p>",
                    "name": "values"
                }
            ],
            "memberof": "Database",
            "longname": "Database.QueryExecResult",
            "scope": "static",
            "attribs": "",
            "id": ".QueryExecResult",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>."
            ]
        },
        {
            "comment": "/** @typedef {string|number|null|Uint8Array} Database.SqlValue */",
            "meta": {
                "filename": "api.js",
                "lineno": 259,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "SqlValue",
            "type": {
                "names": [
                    "string",
                    "number",
                    "null",
                    "Uint8Array"
                ]
            },
            "memberof": "Database",
            "longname": "Database.SqlValue",
            "scope": "static",
            "attribs": "",
            "id": ".SqlValue",
            "ancestors": [
                "<a href=\"Database.html\">Database</a>."
            ]
        },
        {
            "comment": "/**\r\n * An unit of energy . Curabitur sollicitudin porttitor turpis vitae rutrum. Mauris interdum neque id massa sollicitudin, fermentum facilisis erat commodo. In at purus a risus aliquam faucibus.\r\n * @class\r\n */",
            "meta": {
                "range": [
                    216,
                    520
                ],
                "filename": "Energy.js",
                "lineno": 5,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003010",
                    "name": "Energy",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Energy.js"
            },
            "name": "Energy",
            "longname": "Energy",
            "kind": "class",
            "classdesc": "<p>An unit of energy . Curabitur sollicitudin porttitor turpis vitae rutrum. Mauris interdum neque id massa sollicitudin, fermentum facilisis erat commodo. In at purus a risus aliquam faucibus.</p>",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Energy",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n\t\t * the amount of energy in this unit\r\n\t\t * @type {number}\r\n\t\t */",
            "meta": {
                "range": [
                    342,
                    360
                ],
                "filename": "Energy.js",
                "lineno": 11,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003018",
                    "name": "this.amount",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Energy.js"
            },
            "description": "<p>the amount of energy in this unit</p>",
            "type": {
                "names": [
                    "number"
                ]
            },
            "name": "amount",
            "longname": "Energy#amount",
            "kind": "member",
            "memberof": "Energy",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "amount",
            "ancestors": [
                "<a href=\"Energy.html\">Energy</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :number</span>"
        },
        {
            "comment": "/**\r\n         * Mauris interdum neque {@link Environment} id massa\r\n         * @type {EnergyUnit}\r\n         */",
            "meta": {
                "range": [
                    493,
                    509
                ],
                "filename": "Energy.js",
                "lineno": 17,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003024",
                    "name": "this.unit",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Energy.js"
            },
            "description": "<p>Mauris interdum neque {@link Environment} id massa</p>",
            "type": {
                "names": [
                    "EnergyUnit"
                ]
            },
            "name": "unit",
            "longname": "Energy#unit",
            "kind": "member",
            "memberof": "Energy",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "unit",
            "ancestors": [
                "<a href=\"Energy.html\">Energy</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :<a href=\"global.html#EnergyUnit\">EnergyUnit</a></span>"
        },
        {
            "comment": "/**\r\n * @typedef {Object} EnergyUnit\r\n * @property {String} foo kajsdh kajhsd\r\n * @property {Array<Array<String>>} hello aksjdh kaj shdkj asd\r\n */",
            "meta": {
                "filename": "Energy.js",
                "lineno": 21,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Energy.js"
            },
            "kind": "typedef",
            "name": "EnergyUnit",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>kajsdh kajhsd</p>",
                    "name": "foo"
                },
                {
                    "type": {
                        "names": [
                            "Array.<Array.<String>>"
                        ]
                    },
                    "description": "<p>aksjdh kaj shdkj asd</p>",
                    "name": "hello"
                }
            ],
            "longname": "EnergyUnit",
            "scope": "global",
            "attribs": "",
            "id": "EnergyUnit",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * Lorem ipsum dolor sit amet, {@link Energy} consectetur adipiscing elit. Vestibulum condimentum tempus diam. Ut eget ultricies metus, vitae ornare turpis. Vivamus lectus metus, euismod quis tortor quis, pretium semper massa. Nulla mauris sapien, faucibus vitae metus et, ultrices fringilla sem. Sed laoreet tempor odio, elementum scelerisque nunc aliquet quis.\r\n *\r\n * @class\r\n */",
            "meta": {
                "range": [
                    389,
                    825
                ],
                "filename": "Environment.js",
                "lineno": 6,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003031",
                    "name": "Environment",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Environment.js"
            },
            "name": "Environment",
            "longname": "Environment",
            "kind": "class",
            "classdesc": "<p>Lorem ipsum dolor sit amet, {@link Energy} consectetur adipiscing elit. Vestibulum condimentum tempus diam. Ut eget ultricies metus, vitae ornare turpis. Vivamus lectus metus, euismod quis tortor quis, pretium semper massa. Nulla mauris sapien, faucibus vitae metus et, ultrices fringilla sem. Sed laoreet tempor odio, elementum scelerisque nunc aliquet quis.</p>",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Environment",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * Lorem ipsum dolor sit amet, {@link Energy} consectetur adipiscing el\r\n * @event Environment#beforeDestroy\r\n * @type {Energy}\r\n * @property {boolean} foo aalks djlas\r\n */",
            "meta": {
                "filename": "Environment.js",
                "lineno": 36,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Environment.js"
            },
            "description": "<p>Lorem ipsum dolor sit amet, {@link Energy} consectetur adipiscing el</p>",
            "kind": "event",
            "name": "beforeDestroy",
            "type": {
                "names": [
                    "Energy"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>aalks djlas</p>",
                    "name": "foo"
                }
            ],
            "memberof": "Environment",
            "longname": "Environment#event:beforeDestroy",
            "scope": "instance",
            "attribs": "",
            "id": "event:beforeDestroy",
            "ancestors": [
                "<a href=\"Environment.html\">Environment</a>#"
            ]
        },
        {
            "comment": "/**\r\n\t\t * All the living things in this environment\r\n\t\t * @type {Array<Alive>}\r\n\t\t */",
            "meta": {
                "range": [
                    534,
                    558
                ],
                "filename": "Environment.js",
                "lineno": 12,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003039",
                    "name": "this.livingThings",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Environment.js"
            },
            "description": "<p>All the living things in this environment</p>",
            "type": {
                "names": [
                    "Array.<Alive>"
                ]
            },
            "name": "livingThings",
            "longname": "Environment#livingThings",
            "kind": "member",
            "memberof": "Environment",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "livingThings",
            "ancestors": [
                "<a href=\"Environment.html\">Environment</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Array.&lt;<a href=\"Alive.html\">Alive</a>></span>"
        },
        {
            "comment": "/**\r\n\t\t * The name of this environment\r\n\t\t * @type {String}\r\n\t\t */",
            "meta": {
                "range": [
                    647,
                    663
                ],
                "filename": "Environment.js",
                "lineno": 18,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003045",
                    "name": "this.name",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Environment.js"
            },
            "description": "<p>The name of this environment</p>",
            "type": {
                "names": [
                    "String"
                ]
            },
            "name": "name",
            "longname": "Environment#name",
            "kind": "member",
            "memberof": "Environment",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "name",
            "ancestors": [
                "<a href=\"Environment.html\">Environment</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :String</span>"
        },
        {
            "comment": "/**\r\n     * Vestibulum condimentum tempus {@link Alive} diam.\r\n\t * @param {EnvironmentConfiguration} config\r\n\t */",
            "meta": {
                "range": [
                    798,
                    822
                ],
                "filename": "Environment.js",
                "lineno": 25,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003050",
                    "name": "Environment#start",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "config"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "Environment.js"
            },
            "description": "<p>Vestibulum condimentum tempus {@link Alive} diam.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "EnvironmentConfiguration"
                        ]
                    },
                    "name": "config"
                }
            ],
            "name": "start",
            "longname": "Environment#start",
            "kind": "function",
            "memberof": "Environment",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "start",
            "signature": "<span class=\"signature\">(config)</span>",
            "ancestors": [
                "<a href=\"Environment.html\">Environment</a>#"
            ]
        },
        {
            "comment": "/**\r\n * @typedef {Object} EnvironmentConfiguration\r\n * @property {String} name\r\n * @property {Map<String,Number>} strange\r\n */",
            "meta": {
                "filename": "Environment.js",
                "lineno": 30,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Environment.js"
            },
            "kind": "typedef",
            "name": "EnvironmentConfiguration",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "name": "name"
                },
                {
                    "type": {
                        "names": [
                            "Map.<String, Number>"
                        ]
                    },
                    "name": "strange"
                }
            ],
            "longname": "EnvironmentConfiguration",
            "scope": "global",
            "attribs": "",
            "id": "EnvironmentConfiguration",
            "ancestors": []
        },
        {
            "comment": "/**\r\n* This object represents one size of a photo or a [file](https://core.telegram.org/bots/api/#document)\r\n* / [sticker](https://core.telegram.org/bots/api/#sticker)\r\n* thumbnail.\r\n\r\n* @typedef {object} PhotoSize\r\n* @property {string} file_id Identifier for this file, which can be used to download or reuse the file\r\n* @property {string} file_unique_id Unique identifier for this file, which is supposed to be the same over time and\r\n*   for different bots. Can't be used to download or reuse the file.\r\n* @property {number} width Photo width\r\n* @property {number} height Photo height\r\n* @property {number} [file_size] *Optional*. File size in bytes\r\n* @see https://core.telegram.org/bots/api/#photosize\r\n*/",
            "meta": {
                "filename": "Alive.js",
                "lineno": 1,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Alive.js"
            },
            "description": "<p>This object represents one size of a photo or a <a href=\"https://core.telegram.org/bots/api/#document\">file</a>\n/ <a href=\"https://core.telegram.org/bots/api/#sticker\">sticker</a>\nthumbnail.</p>",
            "kind": "typedef",
            "name": "PhotoSize",
            "type": {
                "names": [
                    "object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>Identifier for this file, which can be used to download or reuse the file</p>",
                    "name": "file_id"
                },
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>Unique identifier for this file, which is supposed to be the same over time and\nfor different bots. Can't be used to download or reuse the file.</p>",
                    "name": "file_unique_id"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>Photo width</p>",
                    "name": "width"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>Photo height</p>",
                    "name": "height"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "optional": true,
                    "description": "<p><em>Optional</em>. File size in bytes</p>",
                    "name": "file_size"
                }
            ],
            "see": [
                "https://core.telegram.org/bots/api/#photosize"
            ],
            "longname": "PhotoSize",
            "scope": "global",
            "attribs": "",
            "id": "PhotoSize",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * @typedef {{Database:Database, Statement:Statement}} SqlJs\r\n * @property {Database} Database A class that represents an SQLite database\r\n * @property {Statement} Statement The prepared statement class\r\n */",
            "meta": {
                "filename": "api.js",
                "lineno": 23,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "SqlJs",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>A class that represents an SQLite database</p>",
                    "name": "Database"
                },
                {
                    "type": {
                        "names": [
                            "Statement"
                        ]
                    },
                    "description": "<p>The prepared statement class</p>",
                    "name": "Statement"
                }
            ],
            "longname": "SqlJs",
            "scope": "global",
            "attribs": "",
            "id": "SqlJs",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * @typedef {{locateFile:function(string):string}} SqlJsConfig\r\n * @property {function(string):string} locateFile\r\n * a function that returns the full path to a resource given its file name\r\n * @see https://emscripten.org/docs/api_reference/module.html\r\n */",
            "meta": {
                "filename": "api.js",
                "lineno": 28,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "SqlJsConfig",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "function"
                        ]
                    },
                    "description": "<p>a function that returns the full path to a resource given its file name</p>",
                    "name": "locateFile"
                }
            ],
            "see": [
                "https://emscripten.org/docs/api_reference/module.html"
            ],
            "longname": "SqlJsConfig",
            "scope": "global",
            "attribs": "",
            "id": "SqlJsConfig",
            "ancestors": []
        },
        {
            "comment": "/**\r\n    * @classdesc\r\n    * Represents a prepared statement.\r\n    * Prepared statements allow you to have a template sql string,\r\n    * that you can execute multiple times with different parameters.\r\n    *\r\n    * You can't instantiate this class directly, you have to use a\r\n    * {@link Database} object in order to create a statement.\r\n    *\r\n    * **Warning**: When you close a database (using db.close()),\r\n    * all its statements are closed too and become unusable.\r\n    *\r\n    * Statements can't be created by the API user directly, only by\r\n    * Database::prepare\r\n    *\r\n    * @see Database.html#prepare-dynamic\r\n    * @see https://en.wikipedia.org/wiki/Prepared_statement\r\n    *\r\n    * @constructs Statement\r\n    * @memberof module:SqlJs\r\n    * @param {number} stmt1 The SQLite statement reference\r\n    * @param {Database} db The database from which this statement was created\r\n     */",
            "meta": {
                "range": [
                    7474,
                    7776
                ],
                "filename": "api.js",
                "lineno": 250,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000520",
                    "name": "Statement",
                    "type": "FunctionDeclaration",
                    "paramnames": [
                        "stmt1",
                        "db"
                    ]
                },
                "vars": {
                    "this.stmt": "Statement#stmt",
                    "this.db": "Statement#db",
                    "this.pos": "Statement#pos",
                    "this.allocatedmem": "Statement#allocatedmem"
                },
                "shortpath": "api.js"
            },
            "classdesc": "<p>Represents a prepared statement.\nPrepared statements allow you to have a template sql string,\nthat you can execute multiple times with different parameters.</p>\n<p>You can't instantiate this class directly, you have to use a\n{@link Database} object in order to create a statement.</p>\n<p><strong>Warning</strong>: When you close a database (using db.close()),\nall its statements are closed too and become unusable.</p>\n<p>Statements can't be created by the API user directly, only by\nDatabase::prepare</p>",
            "see": [
                "Database.html#prepare-dynamic",
                "https://en.wikipedia.org/wiki/Prepared_statement"
            ],
            "alias": "Statement",
            "kind": "class",
            "memberof": "module:SqlJs",
            "params": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>The SQLite statement reference</p>",
                    "name": "stmt1"
                },
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database from which this statement was created</p>",
                    "name": "db"
                }
            ],
            "name": "Statement",
            "longname": "Statement",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Statement",
            "signature": "<span class=\"signature\">(stmt1, db)</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>"
            ]
        },
        {
            "comment": "/** Bind values to the parameters, after having reset the statement.\r\n    * If values is null, do nothing and return true.\r\n    *\r\n    * SQL statements can have parameters,\r\n    * named *'?', '?NNN', ':VVV', '@VVV', '$VVV'*,\r\n    * where NNN is a number and VVV a string.\r\n    * This function binds these parameters to the given values.\r\n    *\r\n    * *Warning*: ':', '@', and '$' are included in the parameters names\r\n    *\r\n    * ## Value types\r\n    * Javascript type  | SQLite type\r\n    * -----------------| -----------\r\n    * number           | REAL, INTEGER\r\n    * boolean          | INTEGER\r\n    * string           | TEXT\r\n    * Array, Uint8Array| BLOB\r\n    * null             | NULL\r\n    *\r\n    * @example <caption>Bind values to named parameters</caption>\r\n    *     var stmt = db.prepare(\r\n    *         \"UPDATE test SET a=@newval WHERE id BETWEEN $mini AND $maxi\"\r\n    *     );\r\n    *     stmt.bind({$mini:10, $maxi:20, '@newval':5});\r\n    *\r\n    * @example <caption>Bind values to anonymous parameters</caption>\r\n    * // Create a statement that contains parameters like '?', '?NNN'\r\n    * var stmt = db.prepare(\"UPDATE test SET a=? WHERE id BETWEEN ? AND ?\");\r\n    * // Call Statement.bind with an array as parameter\r\n    * stmt.bind([5, 10, 20]);\r\n    *\r\n    * @see http://www.sqlite.org/datatype3.html\r\n    * @see http://www.sqlite.org/lang_expr.html#varparam\r\n    * @param {Statement.BindParams} values The values to bind\r\n    * @return {boolean} true if it worked\r\n    * @throws {String} SQLite Error\r\n    */",
            "meta": {
                "range": [
                    9507,
                    9884
                ],
                "filename": "api.js",
                "lineno": 301,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000550",
                    "name": "Statement.prototype[\"bind\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "bind",
                    "paramnames": [
                        "values"
                    ]
                },
                "shortpath": "api.js"
            },
            "description": "<p>Bind values to the parameters, after having reset the statement.\nIf values is null, do nothing and return true.</p>\n<p>SQL statements can have parameters,\nnamed <em>'?', '?NNN', ':VVV', '@VVV', '$VVV'</em>,\nwhere NNN is a number and VVV a string.\nThis function binds these parameters to the given values.</p>\n<p><em>Warning</em>: ':', '@', and '$' are included in the parameters names</p>\n<h2 id=\"value-types\">Value types</h2>\n<table>\n<thead>\n<tr>\n<th>Javascript type</th>\n<th>SQLite type</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>number</td>\n<td>REAL, INTEGER</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>INTEGER</td>\n</tr>\n<tr>\n<td>string</td>\n<td>TEXT</td>\n</tr>\n<tr>\n<td>Array, Uint8Array</td>\n<td>BLOB</td>\n</tr>\n<tr>\n<td>null</td>\n<td>NULL</td>\n</tr>\n</tbody>\n</table>",
            "examples": [
                {
                    "caption": "Bind values to named parameters",
                    "code": "    var stmt = db.prepare(\r        \"UPDATE test SET a=@newval WHERE id BETWEEN $mini AND $maxi\"\r    );\r    stmt.bind({$mini:10, $maxi:20, '@newval':5});"
                },
                {
                    "caption": "Bind values to anonymous parameters",
                    "code": "// Create a statement that contains parameters like '?', '?NNN'\rvar stmt = db.prepare(\"UPDATE test SET a=? WHERE id BETWEEN ? AND ?\");\r// Call Statement.bind with an array as parameter\rstmt.bind([5, 10, 20]);"
                }
            ],
            "see": [
                "http://www.sqlite.org/datatype3.html",
                "http://www.sqlite.org/lang_expr.html#varparam"
            ],
            "params": [
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "description": "<p>The values to bind</p>",
                    "name": "values"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>true if it worked</p>"
                }
            ],
            "exceptions": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>SQLite Error</p>"
                }
            ],
            "name": "[\"bind\"]",
            "longname": "Statement#[\"bind\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22bind%22%5D",
            "signature": "<span class=\"signature\">(values)</span><span class=\"type-signature\"> &rarr; {boolean}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Free the memory used by the statement\r\n    @return {boolean} true in case of success\r\n     */",
            "meta": {
                "range": [
                    19997,
                    20247
                ],
                "filename": "api.js",
                "lineno": 597,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001553",
                    "name": "Statement.prototype[\"free\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "free",
                    "paramnames": []
                },
                "vars": {
                    "res": "module:SqlJs~res",
                    "this.stmt": "Statement#stmt"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Free the memory used by the statement</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>true in case of success</p>"
                }
            ],
            "name": "[\"free\"]",
            "longname": "Statement#[\"free\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22free%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {boolean}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Free the memory allocated during parameter binding */",
            "meta": {
                "range": [
                    19708,
                    19887
                ],
                "filename": "api.js",
                "lineno": 588,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001524",
                    "name": "Statement.prototype[\"freemem\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "freemem",
                    "paramnames": []
                },
                "vars": {
                    "mem": "module:SqlJs~mem"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Free the memory allocated during parameter binding</p>",
            "name": "[\"freemem\"]",
            "longname": "Statement#[\"freemem\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22freemem%22%5D",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get one row of results of a statement.\r\n    If the first parameter is not provided, step must have been called before.\r\n    @param {Statement.BindParams} [params] If set, the values will be bound\r\n    to the statement before it is executed\r\n    @return {Database.SqlValue[]} One row of result\r\n    @example <caption>Print all the rows of the table test to the console</caption>\r\n    var stmt = db.prepare(\"SELECT * FROM test\");\r\n    while (stmt.step()) console.log(stmt.get());\r\n     */",
            "meta": {
                "range": [
                    12042,
                    12914
                ],
                "filename": "api.js",
                "lineno": 372,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000801",
                    "name": "Statement.prototype[\"get\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "get",
                    "paramnames": [
                        "params"
                    ]
                },
                "vars": {
                    "results1": "Statement#\"get\"~results1",
                    "ref": "Statement#\"get\"~ref",
                    "field": "module:SqlJs~field"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get one row of results of a statement.\nIf the first parameter is not provided, step must have been called before.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>If set, the values will be bound\nto the statement before it is executed</p>",
                    "name": "params"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Array.<Database.SqlValue>"
                        ]
                    },
                    "description": "<p>One row of result</p>"
                }
            ],
            "examples": [
                {
                    "caption": "Print all the rows of the table test to the console",
                    "code": "    var stmt = db.prepare(\"SELECT * FROM test\");\r\n    while (stmt.step()) console.log(stmt.get());"
                }
            ],
            "name": "[\"get\"]",
            "longname": "Statement#[\"get\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22get%22%5D",
            "signature": "<span class=\"signature\">(params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {Array.&lt;<a href=\"Database.html#.SqlValue\">Database.SqlValue</a>>}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get one row of result as a javascript object, associating column names\r\n    with their value in the current row.\r\n    @param {Statement.BindParams} [params] If set, the values will be bound\r\n    to the statement, and it will be executed\r\n    @return {Object<string, Database.SqlValue>} The row of result\r\n    @see {@link Statement.get}\r\n    @example\r\n        var stmt = db.prepare(\r\n            \"SELECT 5 AS nbr, x'010203' AS data, NULL AS null_value;\"\r\n        );\r\n        stmt.step(); // Execute the statement\r\n        console.log(stmt.getAsObject());\r\n        // Will print {nbr:5, data: Uint8Array([1,2,3]), null_value:null}\r\n     */",
            "meta": {
                "range": [
                    14252,
                    14612
                ],
                "filename": "api.js",
                "lineno": 428,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000956",
                    "name": "Statement.prototype[\"getAsObject\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getAsObject",
                    "paramnames": [
                        "params"
                    ]
                },
                "vars": {
                    "values": "Statement#\"getAsObject\"~values",
                    "names": "Statement#\"getAsObject\"~names",
                    "rowObject": "Statement#\"getAsObject\"~rowObject",
                    "i": "module:SqlJs~i",
                    "name": "Statement#\"getAsObject\"~name",
                    "rowObject[undefined]": "Statement#\"getAsObject\"~rowObject.undefined]"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get one row of result as a javascript object, associating column names\nwith their value in the current row.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>If set, the values will be bound\nto the statement, and it will be executed</p>",
                    "name": "params"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Object.<string, Database.SqlValue>"
                        ]
                    },
                    "description": "<p>The row of result</p>"
                }
            ],
            "see": [
                "{@link Statement.get}"
            ],
            "examples": [
                {
                    "caption": "",
                    "code": "var stmt = db.prepare(\r\n            \"SELECT 5 AS nbr, x'010203' AS data, NULL AS null_value;\"\r\n        );\r\n        stmt.step(); // Execute the statement\r\n        console.log(stmt.getAsObject());\r\n        // Will print {nbr:5, data: Uint8Array([1,2,3]), null_value:null}"
                }
            ],
            "name": "[\"getAsObject\"]",
            "longname": "Statement#[\"getAsObject\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getAsObject%22%5D",
            "signature": "<span class=\"signature\">(params<span class=\"signature-attributes\">opt</span>)</span><span class=\"type-signature\"> &rarr; {Object.&lt;string, <a href=\"Database.html#.SqlValue\">Database.SqlValue</a>>}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get the list of column names of a row of result of a statement.\r\n    @return {string[]} The names of the columns\r\n    @example\r\n    var stmt = db.prepare(\r\n        \"SELECT 5 AS nbr, x'616200' AS data, NULL AS null_value;\"\r\n    );\r\n    stmt.step(); // Execute the statement\r\n    console.log(stmt.getColumnNames());\r\n    // Will print ['nbr','data','null_value']\r\n     */",
            "meta": {
                "range": [
                    13300,
                    13598
                ],
                "filename": "api.js",
                "lineno": 406,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000909",
                    "name": "Statement.prototype[\"getColumnNames\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getColumnNames",
                    "paramnames": []
                },
                "vars": {
                    "results1": "Statement#\"getColumnNames\"~results1",
                    "ref": "Statement#\"getColumnNames\"~ref",
                    "i": "module:SqlJs~i"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get the list of column names of a row of result of a statement.</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Array.<string>"
                        ]
                    },
                    "description": "<p>The names of the columns</p>"
                }
            ],
            "examples": [
                {
                    "caption": "",
                    "code": "var stmt = db.prepare(\r\n        \"SELECT 5 AS nbr, x'616200' AS data, NULL AS null_value;\"\r\n    );\r\n    stmt.step(); // Execute the statement\r\n    console.log(stmt.getColumnNames());\r\n    // Will print ['nbr','data','null_value']"
                }
            ],
            "name": "[\"getColumnNames\"]",
            "longname": "Statement#[\"getColumnNames\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getColumnNames%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {Array.&lt;string>}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get the SQLite's normalized version of the SQL string used in\r\n    preparing this statement.  The meaning of \"normalized\" is not\r\n    well-defined: see {@link https://sqlite.org/c3ref/expanded_sql.html\r\n    the SQLite documentation}.\r\n     @example\r\n     db.run(\"create table test (x integer);\");\r\n     stmt = db.prepare(\"select * from test where x = 42\");\r\n     // returns \"SELECT*FROM test WHERE x=?;\"\r\n     @return {string} The normalized SQL string\r\n     */",
            "meta": {
                "range": [
                    15304,
                    15433
                ],
                "filename": "api.js",
                "lineno": 454,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001032",
                    "name": "Statement.prototype[\"getNormalizedSQL\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getNormalizedSQL",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get the SQLite's normalized version of the SQL string used in\npreparing this statement.  The meaning of &quot;normalized&quot; is not\nwell-defined: see {@link https://sqlite.org/c3ref/expanded_sql.html\nthe SQLite documentation}.</p>",
            "examples": [
                {
                    "caption": "",
                    "code": "db.run(\"create table test (x integer);\");\r\n     stmt = db.prepare(\"select * from test where x = 42\");\r\n     // returns \"SELECT*FROM test WHERE x=?;\"\r\n     "
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>The normalized SQL string</p>"
                }
            ],
            "name": "[\"getNormalizedSQL\"]",
            "longname": "Statement#[\"getNormalizedSQL\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getNormalizedSQL%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {string}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Get the SQL string used in preparing this statement.\r\n     @return {string} The SQL string\r\n     */",
            "meta": {
                "range": [
                    14728,
                    14826
                ],
                "filename": "api.js",
                "lineno": 441,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001016",
                    "name": "Statement.prototype[\"getSQL\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getSQL",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get the SQL string used in preparing this statement.</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>The SQL string</p>"
                }
            ],
            "name": "[\"getSQL\"]",
            "longname": "Statement#[\"getSQL\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getSQL%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {string}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Reset a statement, so that it's parameters can be bound to new values\r\n    It also clears all previous bindings, freeing the memory used\r\n    by bound parameters.\r\n     */",
            "meta": {
                "range": [
                    19411,
                    19638
                ],
                "filename": "api.js",
                "lineno": 580,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001493",
                    "name": "Statement.prototype[\"reset\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "reset",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Reset a statement, so that it's parameters can be bound to new values\nIt also clears all previous bindings, freeing the memory used\nby bound parameters.</p>",
            "name": "[\"reset\"]",
            "longname": "Statement#[\"reset\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22reset%22%5D",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Shorthand for bind + step + reset\r\n    Bind the values, execute the statement, ignoring the rows it returns,\r\n    and resets it\r\n    @param {Statement.BindParams} [values] Value to bind to the statement\r\n     */",
            "meta": {
                "range": [
                    15661,
                    15854
                ],
                "filename": "api.js",
                "lineno": 462,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001048",
                    "name": "Statement.prototype[\"run\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "run",
                    "paramnames": [
                        "values"
                    ]
                },
                "shortpath": "api.js"
            },
            "description": "<p>Shorthand for bind + step + reset\nBind the values, execute the statement, ignoring the rows it returns,\nand resets it</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "Statement.BindParams"
                        ]
                    },
                    "optional": true,
                    "description": "<p>Value to bind to the statement</p>",
                    "name": "values"
                }
            ],
            "name": "[\"run\"]",
            "longname": "Statement#[\"run\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22run%22%5D",
            "signature": "<span class=\"signature\">(values<span class=\"signature-attributes\">opt</span>)</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** Execute the statement, fetching the next line of result,\r\n    that can be retrieved with {@link Statement.get}.\r\n    @return {boolean} true if a row of result available\r\n    @throws {String} SQLite Error\r\n     */",
            "meta": {
                "range": [
                    10113,
                    10539
                ],
                "filename": "api.js",
                "lineno": 317,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000604",
                    "name": "Statement.prototype[\"step\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "step",
                    "paramnames": []
                },
                "vars": {
                    "this.pos": "Statement#pos",
                    "ret": "Statement#\"step\"~ret"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Execute the statement, fetching the next line of result,\nthat can be retrieved with {@link Statement.get}.</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>true if a row of result available</p>"
                }
            ],
            "exceptions": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>SQLite Error</p>"
                }
            ],
            "name": "[\"step\"]",
            "longname": "Statement#[\"step\"]",
            "kind": "function",
            "memberof": "Statement",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22step%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {boolean}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>#"
            ]
        },
        {
            "comment": "/** @typedef {\r\n        Database.SqlValue[]|Object<string, Database.SqlValue>|null\r\n    } Statement.BindParams\r\n     */",
            "meta": {
                "filename": "api.js",
                "lineno": 260,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "BindParams",
            "type": {
                "names": [
                    "Array.<Database.SqlValue>",
                    "Object.<string, Database.SqlValue>",
                    "null"
                ]
            },
            "memberof": "Statement",
            "longname": "Statement.BindParams",
            "scope": "static",
            "attribs": "",
            "id": ".BindParams",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"Statement.html\">Statement</a>."
            ]
        },
        {
            "comment": "/**\r\n     * @classdesc\r\n     * An iterator over multiple SQL statements in a string,\r\n     * preparing and returning a Statement object for the next SQL\r\n     * statement on each iteration.\r\n     *\r\n     * You can't instantiate this class directly, you have to use a\r\n     * {@link Database} object in order to create a statement iterator\r\n     *\r\n     * {@see Database#iterateStatements}\r\n     *\r\n     * @example\r\n     * // loop over and execute statements in string sql\r\n     * for (let statement of db.iterateStatements(sql)) {\r\n     *     statement.step();\r\n     *     // get results, etc.\r\n     *     // do not call statement.free() manually, each statement is freed\r\n     *     // before the next one is parsed\r\n     * }\r\n     *\r\n     * // capture any bad query exceptions with feedback\r\n     * // on the bad sql\r\n     * let it = db.iterateStatements(sql);\r\n     * try {\r\n     *     for (let statement of it) {\r\n     *         statement.step();\r\n     *     }\r\n     * } catch(e) {\r\n     *     console.log(\r\n     *         `The SQL string \"${it.getRemainingSQL()}\" ` +\r\n     *         `contains the following error: ${e}`\r\n     *     );\r\n     * }\r\n     *\r\n     * @implements {Iterator<Statement>}\r\n     * @implements {Iterable<Statement>}\r\n     * @constructs StatementIterator\r\n     * @memberof module:SqlJs\r\n     * @param {string} sql A string containing multiple SQL statements\r\n     * @param {Database} db The database from which this iterator was created\r\n     */",
            "meta": {
                "range": [
                    21731,
                    22163
                ],
                "filename": "api.js",
                "lineno": 646,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001599",
                    "name": "StatementIterator",
                    "type": "FunctionDeclaration",
                    "paramnames": [
                        "sql",
                        "db"
                    ]
                },
                "vars": {
                    "this.db": "StatementIterator#db",
                    "sz": "StatementIterator~sz",
                    "this.sqlPtr": "StatementIterator#sqlPtr",
                    "this.nextSqlPtr": "StatementIterator#nextSqlPtr",
                    "this.nextSqlString": "StatementIterator#nextSqlString",
                    "this.activeStatement": "StatementIterator#activeStatement"
                },
                "shortpath": "api.js"
            },
            "classdesc": "<p>An iterator over multiple SQL statements in a string,\npreparing and returning a Statement object for the next SQL\nstatement on each iteration.</p>\n<p>You can't instantiate this class directly, you have to use a\n{@link Database} object in order to create a statement iterator</p>\n<p>{@see Database#iterateStatements}</p>",
            "examples": [
                {
                    "caption": "",
                    "code": "// loop over and execute statements in string sql\rfor (let statement of db.iterateStatements(sql)) {\r    statement.step();\r    // get results, etc.\r    // do not call statement.free() manually, each statement is freed\r    // before the next one is parsed\r}\r\r// capture any bad query exceptions with feedback\r// on the bad sql\rlet it = db.iterateStatements(sql);\rtry {\r    for (let statement of it) {\r        statement.step();\r    }\r} catch(e) {\r    console.log(\r        `The SQL string \"${it.getRemainingSQL()}\" ` +\r        `contains the following error: ${e}`\r    );\r}"
                }
            ],
            "implements": [
                "Iterator<Statement>",
                "Iterable<Statement>"
            ],
            "alias": "StatementIterator",
            "kind": "class",
            "memberof": "module:SqlJs",
            "params": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>A string containing multiple SQL statements</p>",
                    "name": "sql"
                },
                {
                    "type": {
                        "names": [
                            "Database"
                        ]
                    },
                    "description": "<p>The database from which this iterator was created</p>",
                    "name": "db"
                }
            ],
            "name": "StatementIterator",
            "longname": "StatementIterator",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "StatementIterator",
            "signature": "<span class=\"signature\">(sql, db)</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>"
            ]
        },
        {
            "comment": "/** Get any un-executed portions remaining of the original SQL string\r\n     @return {String}\r\n     */",
            "meta": {
                "range": [
                    24381,
                    24689
                ],
                "filename": "api.js",
                "lineno": 718,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001876",
                    "name": "StatementIterator.prototype[\"getRemainingSQL\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "getRemainder",
                    "paramnames": []
                },
                "shortpath": "api.js"
            },
            "description": "<p>Get any un-executed portions remaining of the original SQL string</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    }
                }
            ],
            "name": "[\"getRemainingSQL\"]",
            "longname": "StatementIterator#[\"getRemainingSQL\"]",
            "kind": "function",
            "memberof": "StatementIterator",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22getRemainingSQL%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {String}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"StatementIterator.html\">StatementIterator</a>#"
            ]
        },
        {
            "comment": "/** Prepare the next available SQL statement\r\n     @return {StatementIterator.StatementIteratorResult}\r\n     @throws {String} SQLite error or invalid iterator error\r\n     */",
            "meta": {
                "range": [
                    22722,
                    24135
                ],
                "filename": "api.js",
                "lineno": 670,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100001666",
                    "name": "StatementIterator.prototype[\"next\"]",
                    "type": "FunctionExpression",
                    "funcscope": "module:SqlJs~Module.\"onRuntimeInitialized\"",
                    "value": "next",
                    "paramnames": []
                },
                "vars": {
                    "this.activeStatement": "StatementIterator#activeStatement",
                    "stack": "StatementIterator#\"next\"~stack",
                    "pzTail": "StatementIterator#\"next\"~pzTail",
                    "this.nextSqlPtr": "StatementIterator#nextSqlPtr",
                    "pStmt": "StatementIterator#\"next\"~pStmt",
                    "this.db.statements[undefined]": "StatementIterator#db.statements[undefined]",
                    "this.nextSqlString": "StatementIterator#nextSqlString"
                },
                "shortpath": "api.js"
            },
            "description": "<p>Prepare the next available SQL statement</p>",
            "returns": [
                {
                    "type": {
                        "names": [
                            "StatementIterator.StatementIteratorResult"
                        ]
                    }
                }
            ],
            "exceptions": [
                {
                    "type": {
                        "names": [
                            "String"
                        ]
                    },
                    "description": "<p>SQLite error or invalid iterator error</p>"
                }
            ],
            "name": "[\"next\"]",
            "longname": "StatementIterator#[\"next\"]",
            "kind": "function",
            "memberof": "StatementIterator",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "%5B%22next%22%5D",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {<a href=\"StatementIterator.html#.StatementIteratorResult\">StatementIterator.StatementIteratorResult</a>}</span>",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"StatementIterator.html\">StatementIterator</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @typedef {{ done:true, value:undefined } |\r\n     *           { done:false, value:Statement}}\r\n     *           StatementIterator.StatementIteratorResult\r\n     * @property {Statement} value the next available Statement\r\n     * (as returned by {@link Database.prepare})\r\n     * @property {boolean} done true if there are no more available statements\r\n     */",
            "meta": {
                "filename": "api.js",
                "lineno": 658,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "typedef",
            "name": "StatementIteratorResult",
            "type": {
                "names": [
                    "Object",
                    "Object"
                ]
            },
            "properties": [
                {
                    "type": {
                        "names": [
                            "Statement"
                        ]
                    },
                    "description": "<p>the next available Statement\n(as returned by {@link Database.prepare})</p>",
                    "name": "value"
                },
                {
                    "type": {
                        "names": [
                            "boolean"
                        ]
                    },
                    "description": "<p>true if there are no more available statements</p>",
                    "name": "done"
                }
            ],
            "memberof": "StatementIterator",
            "longname": "StatementIterator.StatementIteratorResult",
            "scope": "static",
            "attribs": "",
            "id": ".StatementIteratorResult",
            "ancestors": [
                "<a href=\"module-SqlJs.html\">SqlJs</a>",
                "<a href=\"StatementIterator.html\">StatementIterator</a>."
            ]
        },
        {
            "comment": "/**\r\n * Constructor should be hidden\r\n * @hideconstructor\r\n */",
            "meta": {
                "range": [
                    64,
                    256
                ],
                "filename": "HideConstructor.js",
                "lineno": 5,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003057",
                    "name": "Test",
                    "type": "ClassDeclaration",
                    "paramnames": [
                        "hidemepls"
                    ]
                },
                "shortpath": "HideConstructor.js"
            },
            "name": "Test",
            "longname": "Test",
            "kind": "class",
            "classdesc": "<p>Constructor should be hidden</p>",
            "hideconstructor": true,
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Test",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * \r\n     * @param {TestConfigObject} config \r\n     */",
            "meta": {
                "range": [
                    229,
                    253
                ],
                "filename": "HideConstructor.js",
                "lineno": 14,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003071",
                    "name": "Test#start",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "config"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "HideConstructor.js"
            },
            "params": [
                {
                    "type": {
                        "names": [
                            "TestConfigObject"
                        ]
                    },
                    "name": "config"
                }
            ],
            "name": "start",
            "longname": "Test#start",
            "kind": "function",
            "memberof": "Test",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "start",
            "signature": "<span class=\"signature\">(config)</span>",
            "ancestors": [
                "<a href=\"Test.html\">Test</a>#"
            ]
        },
        {
            "comment": "/**\r\n * Donec imperdiet dignissim semper. Sed vehicula purus dui, eget porta lectus convallis sagittis. Suspendisse ac lectus dignissim, tincidunt nisi quis, gravida metus.\r\n * @class\r\n * @extends Alive\r\n */",
            "meta": {
                "range": [
                    209,
                    660
                ],
                "filename": "Tree.js",
                "lineno": 6,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003207",
                    "name": "Tree",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "Tree.js"
            },
            "name": "Tree",
            "longname": "Tree",
            "kind": "class",
            "classdesc": "<p>Donec imperdiet dignissim semper. Sed vehicula purus dui, eget porta lectus convallis sagittis. Suspendisse ac lectus dignissim, tincidunt nisi quis, gravida metus.</p>",
            "augments": [
                "Alive"
            ],
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Tree",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * A constant.\r\n     * @readonly\r\n     * @deprecated This is no longer used\r\n     */",
            "meta": {
                "range": [
                    1576,
                    1584
                ],
                "filename": "Alive.js",
                "lineno": 56,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000025",
                    "name": "FOO",
                    "type": "ClassProperty"
                },
                "shortpath": "Alive.js"
            },
            "name": "FOO",
            "longname": "Tree#FOO",
            "kind": "member",
            "description": "<p>A constant.</p>",
            "readonly": true,
            "deprecated": "This is no longer used",
            "memberof": "Tree",
            "scope": "instance",
            "inherits": "Alive#FOO",
            "inherited": true,
            "overrides": "Alive#FOO",
            "attribs": "<span class=\"type-signature\">(readonly) </span>",
            "id": "FOO",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n         * This is a number array.\r\n         * @constant\r\n         * @type Object\r\n         * @default\r\n         */",
            "meta": {
                "range": [
                    1373,
                    1464
                ],
                "filename": "Alive.js",
                "lineno": 46,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000016",
                    "name": "this.NUMBER_ARRAY",
                    "type": "ObjectExpression",
                    "value": "{\"google\":\"Google\",\"games\":\"Games\"}",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "name": "NUMBER_ARRAY",
            "longname": "Tree#NUMBER_ARRAY",
            "kind": "member",
            "description": "<p>This is a number array.</p>",
            "type": {
                "names": [
                    "Object"
                ]
            },
            "defaultvalue": "<pre class='prettyprint'><code class='nohljsln compact'>{\"google\":\"Google\",\"games\":\"Games\"}</code></pre>",
            "defaultvaluetype": "object",
            "memberof": "Tree",
            "scope": "instance",
            "inherits": "Alive#NUMBER_ARRAY",
            "inherited": true,
            "overrides": "Alive#NUMBER_ARRAY",
            "attribs": "<span class=\"type-signature\">(constant) </span>",
            "id": "NUMBER_ARRAY",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Object</span>"
        },
        {
            "comment": "/**\r\n\t\t * Donec imperdiet dignissim\r\n\t\t * @type {Array<Alive>}\r\n\t\t */",
            "meta": {
                "range": [
                    363,
                    383
                ],
                "filename": "Tree.js",
                "lineno": 13,
                "columnno": 8,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003219",
                    "name": "this.branches",
                    "type": "Literal",
                    "value": null,
                    "paramnames": []
                },
                "shortpath": "Tree.js"
            },
            "description": "<p>Donec imperdiet dignissim</p>",
            "type": {
                "names": [
                    "Array.<Alive>"
                ]
            },
            "name": "branches",
            "longname": "Tree#branches",
            "kind": "member",
            "memberof": "Tree",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "branches",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ],
            "signature": "<span class=\"type-signature\"> :Array.&lt;<a href=\"Alive.html\">Alive</a>></span>"
        },
        {
            "comment": "/**\r\n\t * @param {Environment} environment the environment when this Alive thing is surviving\r\n\t * @return {Energy} the energy wasted in this surviving instance\r\n\t * @method\r\n\t * @fires Tree.crop\r\n\t * @Throws Err\r\n\t */",
            "meta": {
                "range": [
                    620,
                    657
                ],
                "filename": "Tree.js",
                "lineno": 22,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003224",
                    "name": "Tree#crop",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Tree.js"
            },
            "params": [
                {
                    "type": {
                        "names": [
                            "Environment"
                        ]
                    },
                    "description": "<p>the environment when this Alive thing is surviving</p>",
                    "name": "environment"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    },
                    "description": "<p>the energy wasted in this surviving instance</p>"
                }
            ],
            "kind": "function",
            "fires": [
                "Tree.event:crop"
            ],
            "exceptions": [
                {
                    "description": "<p>Err</p>"
                }
            ],
            "name": "crop",
            "longname": "Tree#crop",
            "memberof": "Tree",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "crop",
            "signature": "<span class=\"signature\">(environment)</span><span class=\"type-signature\"> &rarr; {<a href=\"Energy.html\">Energy</a>}</span>",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * Text\r\n     * > Text\r\n     * \r\n     * \r\n     *```js\r\n     * code\r\n     *```\r\n     *\r\n     * \r\n     * > Note that commands are not matched in captions or in the middle of the text.\r\n     */",
            "meta": {
                "range": [
                    2208,
                    2250
                ],
                "filename": "Alive.js",
                "lineno": 80,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000034",
                    "name": "Alive#gameQuery",
                    "type": "MethodDefinition",
                    "paramnames": []
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "name": "gameQuery",
            "longname": "Tree#gameQuery",
            "kind": "function",
            "description": "<p>Text</p>\n<blockquote>\n<p>Text</p>\n</blockquote>\n<pre class=\"prettyprint source lang-js\"><code>code\n</code></pre>\n<blockquote>\n<p>Note that commands are not matched in captions or in the middle of the text.</p>\n</blockquote>",
            "memberof": "Tree",
            "scope": "instance",
            "inherits": "Alive#gameQuery",
            "inherited": true,
            "overrides": "Alive#gameQuery",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "gameQuery",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ]
        },
        {
            "comment": "/**\r\n     * @param {array<object|function|array|number|string|undefined|null|Symbol|boolean|Energy>} life This is an array of many things.\r\n     * @return {Energy} the energy wasted in this surviving instance\r\n     * @link https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu\r\n     * @method\r\n     * @deprecated\r\n     */",
            "meta": {
                "range": [
                    1953,
                    1997
                ],
                "filename": "Alive.js",
                "lineno": 65,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000027",
                    "name": "Alive#survive",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "life"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "Alive.js"
            },
            "name": "survive",
            "longname": "Tree#survive",
            "kind": "function",
            "returns": [
                {
                    "type": {
                        "names": [
                            "Energy"
                        ]
                    },
                    "description": "<p>the energy wasted in this surviving instance</p>"
                }
            ],
            "tags": [
                {
                    "originalTitle": "link",
                    "title": "link",
                    "text": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu",
                    "value": "https://developer.mozilla.org/en-US/docs/Web/API/Element/contextmenu_event context-menu"
                }
            ],
            "deprecated": true,
            "memberof": "Tree",
            "scope": "instance",
            "params": [
                {
                    "type": {
                        "names": [
                            "array.<(object|function()|array|number|string|undefined|null|Symbol|boolean|Energy)>"
                        ]
                    },
                    "description": "<p>This is an array of many things.</p>",
                    "name": "life"
                }
            ],
            "inherits": "Alive#survive",
            "inherited": true,
            "overrides": "Alive#survive",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "survive",
            "signature": "<span class=\"signature\">(life)</span><span class=\"type-signature\"> &rarr; {<a href=\"Energy.html\">Energy</a>}</span>",
            "ancestors": [
                "<a href=\"Tree.html\">Tree</a>#"
            ]
        },
        {
            "comment": "/**\r\n * Class World defines the coordinate system for the model.\r\n * It has transforms for multiple coordinate systems.\r\n *\r\n * The world is defined by an object with 6 properties:\r\n *\r\n *          WorldOptions = {\r\n *              minX: integer,\r\n *              maxX: integer,\r\n *              minY: integer,\r\n *              maxY: integer,\r\n *              minZ: integer,\r\n *              maxZ: integer,\r\n *          }\r\n */",
            "meta": {
                "range": [
                    1108,
                    1932
                ],
                "filename": "World.js",
                "lineno": 35,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003236",
                    "name": "World",
                    "type": "ClassDeclaration",
                    "paramnames": []
                },
                "shortpath": "World.js"
            },
            "classdesc": "<p>Class World defines the coordinate system for the model.\nIt has transforms for multiple coordinate systems.</p>\n<p>The world is defined by an object with 6 properties:</p>\n<pre><code>     WorldOptions = {\n         minX: integer,\n         maxX: integer,\n         minY: integer,\n         maxY: integer,\n         minZ: integer,\n         maxZ: integer,\n     }\n</code></pre>",
            "name": "World",
            "longname": "World",
            "kind": "class",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "World",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * Return a default options object, origin at center.\r\n     *\r\n     * @param {number} [maxX=16] Integer max X value\r\n     * @param {number} [maxY=maxX] Integer max Y value\r\n     * @param {number} [maxZ=Math.max(maxX, maxY)] Integer max Z value\r\n     * @returns WorldOptions\r\n     */",
            "meta": {
                "range": [
                    1553,
                    1929
                ],
                "filename": "World.js",
                "lineno": 53,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003253",
                    "name": "World.defaultOptions",
                    "type": "MethodDefinition",
                    "paramnames": [
                        "maxX",
                        "maxY",
                        "maxZ"
                    ]
                },
                "vars": {
                    "": null
                },
                "shortpath": "World.js"
            },
            "description": "<p>Return a default options object, origin at center.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": 16,
                    "description": "<p>Integer max X value</p>",
                    "name": "maxX"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": "maxX",
                    "description": "<p>Integer max Y value</p>",
                    "name": "maxY"
                },
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "optional": true,
                    "defaultvalue": "Math.max(maxX, maxY)",
                    "description": "<p>Integer max Z value</p>",
                    "name": "maxZ"
                }
            ],
            "returns": [
                {
                    "description": "<p>WorldOptions</p>"
                }
            ],
            "name": "defaultOptions",
            "longname": "World.defaultOptions",
            "kind": "function",
            "memberof": "World",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".defaultOptions",
            "signature": "<span class=\"signature\">(maxX<span class=\"signature-attributes\">opt</span>, maxY<span class=\"signature-attributes\">opt</span>, maxZ<span class=\"signature-attributes\">opt</span>)</span>",
            "ancestors": [
                "<a href=\"World.html\">World</a>."
            ]
        },
        {
            "comment": "/**\r\n * Generate the Fibonacci sequence of numbers.\r\n *\r\n * @yields {number} The next number in the Fibonacci sequence.\r\n */",
            "meta": {
                "range": [
                    787,
                    812
                ],
                "filename": "Apple.js",
                "lineno": 38,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100002997",
                    "name": "fibonacci",
                    "type": "FunctionDeclaration",
                    "paramnames": []
                },
                "shortpath": "Apple.js"
            },
            "description": "<p>Generate the Fibonacci sequence of numbers.</p>",
            "yields": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "description": "<p>The next number in the Fibonacci sequence.</p>"
                }
            ],
            "name": "fibonacci",
            "longname": "fibonacci",
            "kind": "function",
            "scope": "global",
            "params": [],
            "generator": true,
            "attribs": "<span class=\"type-signature\">(generator) </span>",
            "id": "fibonacci",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {number}</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * Asynchronously initializes sql.js\r\n * @function initSqlJs\r\n * @param {SqlJsConfig} config module initialization parameters\r\n * @returns {SqlJs}\r\n * @example\r\n * initSqlJs({\r\n *  locateFile: name => '/path/to/assets/' + name\r\n * }).then(SQL => {\r\n *  const db = new SQL.Database();\r\n *  const result = db.exec(\"select 'hello world'\");\r\n *  console.log(result);\r\n * })\r\n */",
            "meta": {
                "filename": "api.js",
                "lineno": 34,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "description": "<p>Asynchronously initializes sql.js</p>",
            "kind": "function",
            "name": "initSqlJs",
            "params": [
                {
                    "type": {
                        "names": [
                            "SqlJsConfig"
                        ]
                    },
                    "description": "<p>module initialization parameters</p>",
                    "name": "config"
                }
            ],
            "returns": [
                {
                    "type": {
                        "names": [
                            "SqlJs"
                        ]
                    }
                }
            ],
            "examples": [
                {
                    "caption": "",
                    "code": "initSqlJs({\r locateFile: name => '/path/to/assets/' + name\r}).then(SQL => {\r const db = new SQL.Database();\r const result = db.exec(\"select 'hello world'\");\r console.log(result);\r})"
                }
            ],
            "longname": "initSqlJs",
            "scope": "global",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "initSqlJs",
            "signature": "<span class=\"signature\">(config)</span><span class=\"type-signature\"> &rarr; {<a href=\"global.html#SqlJs\">SqlJs</a>}</span>",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * @module SqlJs\r\n */",
            "meta": {
                "filename": "api.js",
                "lineno": 48,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "api.js"
            },
            "kind": "module",
            "name": "SqlJs",
            "longname": "module:SqlJs",
            "attribs": "",
            "id": "SqlJs",
            "ancestors": []
        },
        {
            "comment": "/** @module bookshelf */",
            "meta": {
                "filename": "Modules.js",
                "lineno": 14,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Modules.js"
            },
            "kind": "module",
            "name": "bookshelf",
            "longname": "module:bookshelf",
            "scope": "inner",
            "memberof": "module:color/mixer",
            "attribs": "",
            "id": "bookshelf",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>~"
            ]
        },
        {
            "comment": "/** @class */",
            "meta": {
                "range": [
                    385,
                    466
                ],
                "filename": "Modules.js",
                "lineno": 16,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003103",
                    "name": "this.Book",
                    "type": "FunctionExpression",
                    "paramnames": [
                        "title"
                    ]
                },
                "vars": {
                    "this.title": "module:bookshelf.Book#title"
                },
                "shortpath": "Modules.js"
            },
            "kind": "class",
            "name": "Book",
            "longname": "module:bookshelf.Book",
            "memberof": "module:bookshelf",
            "scope": "static",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "Book",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>",
                "<a href=\"module-bookshelf.html\">~bookshelf</a>."
            ]
        },
        {
            "comment": "/** The title. */",
            "meta": {
                "range": [
                    444,
                    462
                ],
                "filename": "Modules.js",
                "lineno": 18,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003111",
                    "name": "this.title",
                    "type": "Identifier",
                    "value": "title",
                    "paramnames": []
                },
                "shortpath": "Modules.js"
            },
            "description": "<p>The title.</p>",
            "name": "title",
            "longname": "module:bookshelf.Book#title",
            "kind": "member",
            "memberof": "module:bookshelf.Book",
            "scope": "instance",
            "attribs": "<span class=\"type-signature\"></span>",
            "id": "title",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>",
                "<a href=\"module-bookshelf.html\">~bookshelf</a>",
                "<a href=\"module-bookshelf.Book.html\">.Book</a>#"
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/** @module color/mixer */",
            "meta": {
                "filename": "Modules.js",
                "lineno": 1,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "Modules.js"
            },
            "kind": "module",
            "name": "color/mixer",
            "longname": "module:color/mixer",
            "attribs": "",
            "id": "color/mixer",
            "ancestors": []
        },
        {
            "comment": "/** Blend two `colours` together. */",
            "meta": {
                "range": [
                    94,
                    130
                ],
                "filename": "Modules.js",
                "lineno": 4,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003084",
                    "name": "blend",
                    "type": "FunctionExpression"
                },
                "shortpath": "Modules.js"
            },
            "description": "<p>Blend two <code>colours</code> together.</p>",
            "name": "blend",
            "longname": "module:color/mixer.blend",
            "kind": "function",
            "memberof": "module:color/mixer",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".blend",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>."
            ]
        },
        {
            "comment": "/** Darkens a color. */",
            "meta": {
                "range": [
                    295,
                    339
                ],
                "filename": "Modules.js",
                "lineno": 12,
                "columnno": 0,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003094",
                    "name": "exports.darken",
                    "type": "FunctionExpression",
                    "paramnames": [
                        "color",
                        "shade"
                    ]
                },
                "shortpath": "Modules.js"
            },
            "description": "<p>Darkens a color.</p>",
            "name": "darken",
            "longname": "module:color/mixer.darken",
            "kind": "function",
            "memberof": "module:color/mixer",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".darken",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>."
            ]
        },
        {
            "comment": "/** Generator example\r\n     * @yields {string} A `string` object, which *may* be empty\r\n     */",
            "meta": {
                "range": [
                    238,
                    262
                ],
                "filename": "Modules.js",
                "lineno": 8,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003089",
                    "name": "fib",
                    "type": "FunctionExpression",
                    "value": "gen"
                },
                "shortpath": "Modules.js"
            },
            "description": "<p>Generator example</p>",
            "yields": [
                {
                    "type": {
                        "names": [
                            "string"
                        ]
                    },
                    "description": "<p>A <code>string</code> object, which <em>may</em> be empty</p>"
                }
            ],
            "name": "fib",
            "longname": "module:color/mixer.fib",
            "kind": "function",
            "memberof": "module:color/mixer",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".fib",
            "signature": "<span class=\"signature\">()</span><span class=\"type-signature\"> &rarr; {string}</span>",
            "ancestors": [
                "<a href=\"module-color_mixer.html\">color/mixer</a>."
            ]
        },
        {
            "comment": "/**\r\n     * @namespace obj.map\r\n     */",
            "meta": {
                "filename": "NamespaceWithAlias.js",
                "lineno": 2,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {},
                "shortpath": "NamespaceWithAlias.js"
            },
            "kind": "namespace",
            "name": "map",
            "memberof": "obj",
            "longname": "obj.map",
            "scope": "static",
            "attribs": "",
            "id": "map",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * This is an alias. It's original name is start9\r\n     * @memberOf obj.map\r\n     * @function\r\n     * @alias obj.map.aliasOfStart9\r\n     */",
            "meta": {
                "range": [
                    408,
                    435
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 19,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003136",
                    "name": "map.start9",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>This is an alias. It's original name is start9</p>",
            "memberof": "obj.map",
            "kind": "function",
            "alias": "obj.map.aliasOfStart9",
            "name": "aliasOfStart9",
            "longname": "obj.map.aliasOfStart9",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".aliasOfStart9",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    222,
                    248
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 12,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003129",
                    "name": "map.start",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start",
            "longname": "obj.map.map.start",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1641,
                    1668
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 73,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003199",
                    "name": "map.start0",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start0",
            "longname": "obj.map.map.start0",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start0",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    545,
                    572
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 25,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003143",
                    "name": "map.start1",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start1",
            "longname": "obj.map.map.start1",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start1",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    682,
                    709
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 31,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003150",
                    "name": "map.start2",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start2",
            "longname": "obj.map.map.start2",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start2",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    819,
                    846
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 37,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003157",
                    "name": "map.start3",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start3",
            "longname": "obj.map.map.start3",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start3",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    956,
                    983
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 43,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003164",
                    "name": "map.start4",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start4",
            "longname": "obj.map.map.start4",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start4",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1093,
                    1120
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 49,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003171",
                    "name": "map.start5",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start5",
            "longname": "obj.map.map.start5",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start5",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1230,
                    1257
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 55,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003178",
                    "name": "map.start6",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start6",
            "longname": "obj.map.map.start6",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start6",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1367,
                    1394
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 61,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003185",
                    "name": "map.start7",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start7",
            "longname": "obj.map.map.start7",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start7",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Sample function that does nothing\r\n     * @memberOf obj.map\r\n     * @function\r\n     */",
            "meta": {
                "range": [
                    1504,
                    1531
                ],
                "filename": "NamespaceWithAlias.js",
                "lineno": 67,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100003192",
                    "name": "map.start8",
                    "type": "FunctionExpression",
                    "funcscope": "create_public_interface",
                    "paramnames": []
                },
                "shortpath": "NamespaceWithAlias.js"
            },
            "description": "<p>Sample function that does nothing</p>",
            "memberof": "obj.map",
            "kind": "function",
            "name": "map.start8",
            "longname": "obj.map.map.start8",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".map.start8",
            "signature": "<span class=\"signature\">()</span>",
            "ancestors": [
                "<a href=\"obj.map.html\">.map</a>."
            ]
        },
        {
            "kind": "package",
            "longname": "package:undefined",
            "files": [
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Alive.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\api.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Apple.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\assets\\script.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Energy.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Environment.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\HideConstructor.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Modules.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\NamespaceWithAlias.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\Tree.js",
                "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src\\World.js"
            ],
            "attribs": "",
            "id": "package:",
            "ancestors": []
        },
        {
            "comment": "/**\r\n * Options for ordering a delicious slice of pie.\r\n * @namespace\r\n */",
            "meta": {
                "range": [
                    2337,
                    2673
                ],
                "filename": "Alive.js",
                "lineno": 89,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000041",
                    "name": "pieOptions",
                    "type": "ObjectExpression",
                    "value": "{\"plain\":\"pie\",\"aLaMode\":\"\",\"aNamespaceFunction\":\"\"}"
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>Options for ordering a delicious slice of pie.</p>",
            "kind": "namespace",
            "name": "pieOptions",
            "longname": "pieOptions",
            "scope": "global",
            "params": [],
            "attribs": "",
            "id": "pieOptions",
            "ancestors": []
        },
        {
            "comment": "/**\r\n     * A la mode.\r\n     * @readonly\r\n     */",
            "meta": {
                "range": [
                    2464,
                    2534
                ],
                "filename": "Alive.js",
                "lineno": 98,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000046",
                    "name": "aLaMode",
                    "paramnames": []
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>A la mode.</p>",
            "readonly": true,
            "name": "aLaMode",
            "longname": "pieOptions.aLaMode",
            "kind": "member",
            "memberof": "pieOptions",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static, readonly) </span>",
            "id": ".aLaMode",
            "ancestors": [
                "<a href=\"pieOptions.html\">pieOptions</a>."
            ],
            "signature": "<span class=\"type-signature\"></span>"
        },
        {
            "comment": "/**\r\n     * This is just a namespace functions.\r\n     * @param {number} args \r\n     */",
            "meta": {
                "range": [
                    2635,
                    2670
                ],
                "filename": "Alive.js",
                "lineno": 106,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000055",
                    "name": "aNamespaceFunction",
                    "type": "FunctionExpression"
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>This is just a namespace functions.</p>",
            "params": [
                {
                    "type": {
                        "names": [
                            "number"
                        ]
                    },
                    "name": "args"
                }
            ],
            "name": "aNamespaceFunction",
            "longname": "pieOptions.aNamespaceFunction",
            "kind": "function",
            "memberof": "pieOptions",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".aNamespaceFunction",
            "signature": "<span class=\"signature\">(args)</span>",
            "ancestors": [
                "<a href=\"pieOptions.html\">pieOptions</a>."
            ]
        },
        {
            "comment": "/**\r\n     * Plain.\r\n     */",
            "meta": {
                "range": [
                    2390,
                    2402
                ],
                "filename": "Alive.js",
                "lineno": 93,
                "columnno": 4,
                "path": "C:\\Users\\ankit\\projects\\github\\clean-jsdoc-theme\\demo\\src",
                "code": {
                    "id": "astnode100000044",
                    "name": "plain",
                    "type": "Literal",
                    "value": "pie"
                },
                "shortpath": "Alive.js"
            },
            "description": "<p>Plain.</p>",
            "name": "plain",
            "longname": "pieOptions.plain",
            "kind": "member",
            "memberof": "pieOptions",
            "scope": "static",
            "attribs": "<span class=\"type-signature\">(static) </span>",
            "id": ".plain",
            "ancestors": [
                "<a href=\"pieOptions.html\">pieOptions</a>."
            ],
            "signature": "<span class=\"type-signature\"></span>"
        }
    ]
}